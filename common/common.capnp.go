// Code generated by capnpc-go. DO NOT EDIT.

package common

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
)

type GameMessage capnp.Struct
type GameMessage_Which uint16

const (
	GameMessage_Which_playerMove      GameMessage_Which = 0
	GameMessage_Which_playerAction    GameMessage_Which = 1
	GameMessage_Which_gameStateUpdate GameMessage_Which = 2
	GameMessage_Which_chatMessage     GameMessage_Which = 3
)

func (w GameMessage_Which) String() string {
	const s = "playerMoveplayerActiongameStateUpdatechatMessage"
	switch w {
	case GameMessage_Which_playerMove:
		return s[0:10]
	case GameMessage_Which_playerAction:
		return s[10:22]
	case GameMessage_Which_gameStateUpdate:
		return s[22:37]
	case GameMessage_Which_chatMessage:
		return s[37:48]

	}
	return "GameMessage_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// GameMessage_TypeID is the unique identifier for the type GameMessage.
const GameMessage_TypeID = 0xf6ea5e0354b3cffe

func NewGameMessage(s *capnp.Segment) (GameMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GameMessage(st), err
}

func NewRootGameMessage(s *capnp.Segment) (GameMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GameMessage(st), err
}

func ReadRootGameMessage(msg *capnp.Message) (GameMessage, error) {
	root, err := msg.Root()
	return GameMessage(root.Struct()), err
}

func (s GameMessage) String() string {
	str, _ := text.Marshal(0xf6ea5e0354b3cffe, capnp.Struct(s))
	return str
}

func (s GameMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GameMessage) DecodeFromPtr(p capnp.Ptr) GameMessage {
	return GameMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GameMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s GameMessage) Which() GameMessage_Which {
	return GameMessage_Which(capnp.Struct(s).Uint16(0))
}
func (s GameMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GameMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GameMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GameMessage) PlayerMove() (PlayerMove, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != playerMove")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return PlayerMove(p.Struct()), err
}

func (s GameMessage) HasPlayerMove() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s GameMessage) SetPlayerMove(v PlayerMove) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPlayerMove sets the playerMove field to a newly
// allocated PlayerMove struct, preferring placement in s's segment.
func (s GameMessage) NewPlayerMove() (PlayerMove, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewPlayerMove(capnp.Struct(s).Segment())
	if err != nil {
		return PlayerMove{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s GameMessage) PlayerAction() (PlayerAction, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != playerAction")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return PlayerAction(p.Struct()), err
}

func (s GameMessage) HasPlayerAction() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s GameMessage) SetPlayerAction(v PlayerAction) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPlayerAction sets the playerAction field to a newly
// allocated PlayerAction struct, preferring placement in s's segment.
func (s GameMessage) NewPlayerAction() (PlayerAction, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewPlayerAction(capnp.Struct(s).Segment())
	if err != nil {
		return PlayerAction{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s GameMessage) GameStateUpdate() (GameStateUpdate, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != gameStateUpdate")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return GameStateUpdate(p.Struct()), err
}

func (s GameMessage) HasGameStateUpdate() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s GameMessage) SetGameStateUpdate(v GameStateUpdate) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGameStateUpdate sets the gameStateUpdate field to a newly
// allocated GameStateUpdate struct, preferring placement in s's segment.
func (s GameMessage) NewGameStateUpdate() (GameStateUpdate, error) {
	capnp.Struct(s).SetUint16(0, 2)
	ss, err := NewGameStateUpdate(capnp.Struct(s).Segment())
	if err != nil {
		return GameStateUpdate{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s GameMessage) ChatMessage() (ChatMessage, error) {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != chatMessage")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return ChatMessage(p.Struct()), err
}

func (s GameMessage) HasChatMessage() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s GameMessage) SetChatMessage(v ChatMessage) error {
	capnp.Struct(s).SetUint16(0, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewChatMessage sets the chatMessage field to a newly
// allocated ChatMessage struct, preferring placement in s's segment.
func (s GameMessage) NewChatMessage() (ChatMessage, error) {
	capnp.Struct(s).SetUint16(0, 3)
	ss, err := NewChatMessage(capnp.Struct(s).Segment())
	if err != nil {
		return ChatMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// GameMessage_List is a list of GameMessage.
type GameMessage_List = capnp.StructList[GameMessage]

// NewGameMessage creates a new list of GameMessage.
func NewGameMessage_List(s *capnp.Segment, sz int32) (GameMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[GameMessage](l), err
}

// GameMessage_Future is a wrapper for a GameMessage promised by a client call.
type GameMessage_Future struct{ *capnp.Future }

func (f GameMessage_Future) Struct() (GameMessage, error) {
	p, err := f.Future.Ptr()
	return GameMessage(p.Struct()), err
}
func (p GameMessage_Future) PlayerMove() PlayerMove_Future {
	return PlayerMove_Future{Future: p.Future.Field(0, nil)}
}
func (p GameMessage_Future) PlayerAction() PlayerAction_Future {
	return PlayerAction_Future{Future: p.Future.Field(0, nil)}
}
func (p GameMessage_Future) GameStateUpdate() GameStateUpdate_Future {
	return GameStateUpdate_Future{Future: p.Future.Field(0, nil)}
}
func (p GameMessage_Future) ChatMessage() ChatMessage_Future {
	return ChatMessage_Future{Future: p.Future.Field(0, nil)}
}

type Vector capnp.Struct

// Vector_TypeID is the unique identifier for the type Vector.
const Vector_TypeID = 0xe587c61266c80312

func NewVector(s *capnp.Segment) (Vector, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Vector(st), err
}

func NewRootVector(s *capnp.Segment) (Vector, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Vector(st), err
}

func ReadRootVector(msg *capnp.Message) (Vector, error) {
	root, err := msg.Root()
	return Vector(root.Struct()), err
}

func (s Vector) String() string {
	str, _ := text.Marshal(0xe587c61266c80312, capnp.Struct(s))
	return str
}

func (s Vector) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Vector) DecodeFromPtr(p capnp.Ptr) Vector {
	return Vector(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Vector) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Vector) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Vector) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Vector) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Vector) X() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Vector) SetX(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Vector) Y() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Vector) SetY(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// Vector_List is a list of Vector.
type Vector_List = capnp.StructList[Vector]

// NewVector creates a new list of Vector.
func NewVector_List(s *capnp.Segment, sz int32) (Vector_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Vector](l), err
}

// Vector_Future is a wrapper for a Vector promised by a client call.
type Vector_Future struct{ *capnp.Future }

func (f Vector_Future) Struct() (Vector, error) {
	p, err := f.Future.Ptr()
	return Vector(p.Struct()), err
}

type PlayerMove capnp.Struct

// PlayerMove_TypeID is the unique identifier for the type PlayerMove.
const PlayerMove_TypeID = 0xa057f75f642c0441

func NewPlayerMove(s *capnp.Segment) (PlayerMove, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PlayerMove(st), err
}

func NewRootPlayerMove(s *capnp.Segment) (PlayerMove, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PlayerMove(st), err
}

func ReadRootPlayerMove(msg *capnp.Message) (PlayerMove, error) {
	root, err := msg.Root()
	return PlayerMove(root.Struct()), err
}

func (s PlayerMove) String() string {
	str, _ := text.Marshal(0xa057f75f642c0441, capnp.Struct(s))
	return str
}

func (s PlayerMove) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PlayerMove) DecodeFromPtr(p capnp.Ptr) PlayerMove {
	return PlayerMove(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PlayerMove) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PlayerMove) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PlayerMove) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PlayerMove) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PlayerMove) PlayerID() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PlayerMove) SetPlayerID(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PlayerMove) Position() (Vector, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Vector(p.Struct()), err
}

func (s PlayerMove) HasPosition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PlayerMove) SetPosition(v Vector) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPosition sets the position field to a newly
// allocated Vector struct, preferring placement in s's segment.
func (s PlayerMove) NewPosition() (Vector, error) {
	ss, err := NewVector(capnp.Struct(s).Segment())
	if err != nil {
		return Vector{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// PlayerMove_List is a list of PlayerMove.
type PlayerMove_List = capnp.StructList[PlayerMove]

// NewPlayerMove creates a new list of PlayerMove.
func NewPlayerMove_List(s *capnp.Segment, sz int32) (PlayerMove_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[PlayerMove](l), err
}

// PlayerMove_Future is a wrapper for a PlayerMove promised by a client call.
type PlayerMove_Future struct{ *capnp.Future }

func (f PlayerMove_Future) Struct() (PlayerMove, error) {
	p, err := f.Future.Ptr()
	return PlayerMove(p.Struct()), err
}
func (p PlayerMove_Future) Position() Vector_Future {
	return Vector_Future{Future: p.Future.Field(0, nil)}
}

type PlayerAction capnp.Struct

// PlayerAction_TypeID is the unique identifier for the type PlayerAction.
const PlayerAction_TypeID = 0xb89c9bf5ba83d0ea

func NewPlayerAction(s *capnp.Segment) (PlayerAction, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PlayerAction(st), err
}

func NewRootPlayerAction(s *capnp.Segment) (PlayerAction, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PlayerAction(st), err
}

func ReadRootPlayerAction(msg *capnp.Message) (PlayerAction, error) {
	root, err := msg.Root()
	return PlayerAction(root.Struct()), err
}

func (s PlayerAction) String() string {
	str, _ := text.Marshal(0xb89c9bf5ba83d0ea, capnp.Struct(s))
	return str
}

func (s PlayerAction) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PlayerAction) DecodeFromPtr(p capnp.Ptr) PlayerAction {
	return PlayerAction(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PlayerAction) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PlayerAction) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PlayerAction) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PlayerAction) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PlayerAction) PlayerID() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PlayerAction) SetPlayerID(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PlayerAction) Action() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s PlayerAction) HasAction() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PlayerAction) ActionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s PlayerAction) SetAction(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// PlayerAction_List is a list of PlayerAction.
type PlayerAction_List = capnp.StructList[PlayerAction]

// NewPlayerAction creates a new list of PlayerAction.
func NewPlayerAction_List(s *capnp.Segment, sz int32) (PlayerAction_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[PlayerAction](l), err
}

// PlayerAction_Future is a wrapper for a PlayerAction promised by a client call.
type PlayerAction_Future struct{ *capnp.Future }

func (f PlayerAction_Future) Struct() (PlayerAction, error) {
	p, err := f.Future.Ptr()
	return PlayerAction(p.Struct()), err
}

type GameStateUpdate capnp.Struct

// GameStateUpdate_TypeID is the unique identifier for the type GameStateUpdate.
const GameStateUpdate_TypeID = 0xc0dbb3eb0c721ad0

func NewGameStateUpdate(s *capnp.Segment) (GameStateUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GameStateUpdate(st), err
}

func NewRootGameStateUpdate(s *capnp.Segment) (GameStateUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GameStateUpdate(st), err
}

func ReadRootGameStateUpdate(msg *capnp.Message) (GameStateUpdate, error) {
	root, err := msg.Root()
	return GameStateUpdate(root.Struct()), err
}

func (s GameStateUpdate) String() string {
	str, _ := text.Marshal(0xc0dbb3eb0c721ad0, capnp.Struct(s))
	return str
}

func (s GameStateUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GameStateUpdate) DecodeFromPtr(p capnp.Ptr) GameStateUpdate {
	return GameStateUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GameStateUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GameStateUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GameStateUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GameStateUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GameStateUpdate) PlayerStates() (PlayerState_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return PlayerState_List(p.List()), err
}

func (s GameStateUpdate) HasPlayerStates() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GameStateUpdate) SetPlayerStates(v PlayerState_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPlayerStates sets the playerStates field to a newly
// allocated PlayerState_List, preferring placement in s's segment.
func (s GameStateUpdate) NewPlayerStates(n int32) (PlayerState_List, error) {
	l, err := NewPlayerState_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return PlayerState_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// GameStateUpdate_List is a list of GameStateUpdate.
type GameStateUpdate_List = capnp.StructList[GameStateUpdate]

// NewGameStateUpdate creates a new list of GameStateUpdate.
func NewGameStateUpdate_List(s *capnp.Segment, sz int32) (GameStateUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[GameStateUpdate](l), err
}

// GameStateUpdate_Future is a wrapper for a GameStateUpdate promised by a client call.
type GameStateUpdate_Future struct{ *capnp.Future }

func (f GameStateUpdate_Future) Struct() (GameStateUpdate, error) {
	p, err := f.Future.Ptr()
	return GameStateUpdate(p.Struct()), err
}

type PlayerState capnp.Struct

// PlayerState_TypeID is the unique identifier for the type PlayerState.
const PlayerState_TypeID = 0xb6cdb27758ce0260

func NewPlayerState(s *capnp.Segment) (PlayerState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PlayerState(st), err
}

func NewRootPlayerState(s *capnp.Segment) (PlayerState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PlayerState(st), err
}

func ReadRootPlayerState(msg *capnp.Message) (PlayerState, error) {
	root, err := msg.Root()
	return PlayerState(root.Struct()), err
}

func (s PlayerState) String() string {
	str, _ := text.Marshal(0xb6cdb27758ce0260, capnp.Struct(s))
	return str
}

func (s PlayerState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PlayerState) DecodeFromPtr(p capnp.Ptr) PlayerState {
	return PlayerState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PlayerState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PlayerState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PlayerState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PlayerState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PlayerState) PlayerID() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PlayerState) SetPlayerID(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PlayerState) Position() (Vector, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Vector(p.Struct()), err
}

func (s PlayerState) HasPosition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PlayerState) SetPosition(v Vector) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPosition sets the position field to a newly
// allocated Vector struct, preferring placement in s's segment.
func (s PlayerState) NewPosition() (Vector, error) {
	ss, err := NewVector(capnp.Struct(s).Segment())
	if err != nil {
		return Vector{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// PlayerState_List is a list of PlayerState.
type PlayerState_List = capnp.StructList[PlayerState]

// NewPlayerState creates a new list of PlayerState.
func NewPlayerState_List(s *capnp.Segment, sz int32) (PlayerState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[PlayerState](l), err
}

// PlayerState_Future is a wrapper for a PlayerState promised by a client call.
type PlayerState_Future struct{ *capnp.Future }

func (f PlayerState_Future) Struct() (PlayerState, error) {
	p, err := f.Future.Ptr()
	return PlayerState(p.Struct()), err
}
func (p PlayerState_Future) Position() Vector_Future {
	return Vector_Future{Future: p.Future.Field(0, nil)}
}

type ChatMessage capnp.Struct

// ChatMessage_TypeID is the unique identifier for the type ChatMessage.
const ChatMessage_TypeID = 0xa4db7870f180a59d

func NewChatMessage(s *capnp.Segment) (ChatMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ChatMessage(st), err
}

func NewRootChatMessage(s *capnp.Segment) (ChatMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ChatMessage(st), err
}

func ReadRootChatMessage(msg *capnp.Message) (ChatMessage, error) {
	root, err := msg.Root()
	return ChatMessage(root.Struct()), err
}

func (s ChatMessage) String() string {
	str, _ := text.Marshal(0xa4db7870f180a59d, capnp.Struct(s))
	return str
}

func (s ChatMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ChatMessage) DecodeFromPtr(p capnp.Ptr) ChatMessage {
	return ChatMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ChatMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ChatMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ChatMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ChatMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ChatMessage) PlayerID() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ChatMessage) SetPlayerID(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ChatMessage) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ChatMessage) HasText() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ChatMessage) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ChatMessage) SetText(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ChatMessage_List is a list of ChatMessage.
type ChatMessage_List = capnp.StructList[ChatMessage]

// NewChatMessage creates a new list of ChatMessage.
func NewChatMessage_List(s *capnp.Segment, sz int32) (ChatMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ChatMessage](l), err
}

// ChatMessage_Future is a wrapper for a ChatMessage promised by a client call.
type ChatMessage_Future struct{ *capnp.Future }

func (f ChatMessage_Future) Struct() (ChatMessage, error) {
	p, err := f.Future.Ptr()
	return ChatMessage(p.Struct()), err
}

type ClusterJoinRequest capnp.Struct

// ClusterJoinRequest_TypeID is the unique identifier for the type ClusterJoinRequest.
const ClusterJoinRequest_TypeID = 0xf928dc8ae63a322b

func NewClusterJoinRequest(s *capnp.Segment) (ClusterJoinRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClusterJoinRequest(st), err
}

func NewRootClusterJoinRequest(s *capnp.Segment) (ClusterJoinRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClusterJoinRequest(st), err
}

func ReadRootClusterJoinRequest(msg *capnp.Message) (ClusterJoinRequest, error) {
	root, err := msg.Root()
	return ClusterJoinRequest(root.Struct()), err
}

func (s ClusterJoinRequest) String() string {
	str, _ := text.Marshal(0xf928dc8ae63a322b, capnp.Struct(s))
	return str
}

func (s ClusterJoinRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClusterJoinRequest) DecodeFromPtr(p capnp.Ptr) ClusterJoinRequest {
	return ClusterJoinRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClusterJoinRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClusterJoinRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClusterJoinRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClusterJoinRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClusterJoinRequest) Address() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ClusterJoinRequest) HasAddress() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClusterJoinRequest) AddressBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ClusterJoinRequest) SetAddress(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ClusterJoinRequest_List is a list of ClusterJoinRequest.
type ClusterJoinRequest_List = capnp.StructList[ClusterJoinRequest]

// NewClusterJoinRequest creates a new list of ClusterJoinRequest.
func NewClusterJoinRequest_List(s *capnp.Segment, sz int32) (ClusterJoinRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ClusterJoinRequest](l), err
}

// ClusterJoinRequest_Future is a wrapper for a ClusterJoinRequest promised by a client call.
type ClusterJoinRequest_Future struct{ *capnp.Future }

func (f ClusterJoinRequest_Future) Struct() (ClusterJoinRequest, error) {
	p, err := f.Future.Ptr()
	return ClusterJoinRequest(p.Struct()), err
}

type ClusterJoinResponse capnp.Struct

// ClusterJoinResponse_TypeID is the unique identifier for the type ClusterJoinResponse.
const ClusterJoinResponse_TypeID = 0xcf33420367b84949

func NewClusterJoinResponse(s *capnp.Segment) (ClusterJoinResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ClusterJoinResponse(st), err
}

func NewRootClusterJoinResponse(s *capnp.Segment) (ClusterJoinResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ClusterJoinResponse(st), err
}

func ReadRootClusterJoinResponse(msg *capnp.Message) (ClusterJoinResponse, error) {
	root, err := msg.Root()
	return ClusterJoinResponse(root.Struct()), err
}

func (s ClusterJoinResponse) String() string {
	str, _ := text.Marshal(0xcf33420367b84949, capnp.Struct(s))
	return str
}

func (s ClusterJoinResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClusterJoinResponse) DecodeFromPtr(p capnp.Ptr) ClusterJoinResponse {
	return ClusterJoinResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClusterJoinResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClusterJoinResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClusterJoinResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClusterJoinResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClusterJoinResponse) ShardID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ClusterJoinResponse) HasShardID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClusterJoinResponse) ShardIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ClusterJoinResponse) SetShardID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ClusterJoinResponse) Pos() (Vector, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Vector(p.Struct()), err
}

func (s ClusterJoinResponse) HasPos() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ClusterJoinResponse) SetPos(v Vector) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewPos sets the pos field to a newly
// allocated Vector struct, preferring placement in s's segment.
func (s ClusterJoinResponse) NewPos() (Vector, error) {
	ss, err := NewVector(capnp.Struct(s).Segment())
	if err != nil {
		return Vector{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ClusterJoinResponse_List is a list of ClusterJoinResponse.
type ClusterJoinResponse_List = capnp.StructList[ClusterJoinResponse]

// NewClusterJoinResponse creates a new list of ClusterJoinResponse.
func NewClusterJoinResponse_List(s *capnp.Segment, sz int32) (ClusterJoinResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[ClusterJoinResponse](l), err
}

// ClusterJoinResponse_Future is a wrapper for a ClusterJoinResponse promised by a client call.
type ClusterJoinResponse_Future struct{ *capnp.Future }

func (f ClusterJoinResponse_Future) Struct() (ClusterJoinResponse, error) {
	p, err := f.Future.Ptr()
	return ClusterJoinResponse(p.Struct()), err
}
func (p ClusterJoinResponse_Future) Pos() Vector_Future {
	return Vector_Future{Future: p.Future.Field(1, nil)}
}

type MapData capnp.Struct

// MapData_TypeID is the unique identifier for the type MapData.
const MapData_TypeID = 0xc818a5ce7d315b5f

func NewMapData(s *capnp.Segment) (MapData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MapData(st), err
}

func NewRootMapData(s *capnp.Segment) (MapData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MapData(st), err
}

func ReadRootMapData(msg *capnp.Message) (MapData, error) {
	root, err := msg.Root()
	return MapData(root.Struct()), err
}

func (s MapData) String() string {
	str, _ := text.Marshal(0xc818a5ce7d315b5f, capnp.Struct(s))
	return str
}

func (s MapData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MapData) DecodeFromPtr(p capnp.Ptr) MapData {
	return MapData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MapData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MapData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MapData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MapData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MapData) Size() (Vector, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Vector(p.Struct()), err
}

func (s MapData) HasSize() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MapData) SetSize(v Vector) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSize sets the size field to a newly
// allocated Vector struct, preferring placement in s's segment.
func (s MapData) NewSize() (Vector, error) {
	ss, err := NewVector(capnp.Struct(s).Segment())
	if err != nil {
		return Vector{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MapData_List is a list of MapData.
type MapData_List = capnp.StructList[MapData]

// NewMapData creates a new list of MapData.
func NewMapData_List(s *capnp.Segment, sz int32) (MapData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[MapData](l), err
}

// MapData_Future is a wrapper for a MapData promised by a client call.
type MapData_Future struct{ *capnp.Future }

func (f MapData_Future) Struct() (MapData, error) {
	p, err := f.Future.Ptr()
	return MapData(p.Struct()), err
}
func (p MapData_Future) Size() Vector_Future {
	return Vector_Future{Future: p.Future.Field(0, nil)}
}

type ClientConnectionRequest capnp.Struct

// ClientConnectionRequest_TypeID is the unique identifier for the type ClientConnectionRequest.
const ClientConnectionRequest_TypeID = 0x874806c29c1c0838

func NewClientConnectionRequest(s *capnp.Segment) (ClientConnectionRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ClientConnectionRequest(st), err
}

func NewRootClientConnectionRequest(s *capnp.Segment) (ClientConnectionRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ClientConnectionRequest(st), err
}

func ReadRootClientConnectionRequest(msg *capnp.Message) (ClientConnectionRequest, error) {
	root, err := msg.Root()
	return ClientConnectionRequest(root.Struct()), err
}

func (s ClientConnectionRequest) String() string {
	str, _ := text.Marshal(0x874806c29c1c0838, capnp.Struct(s))
	return str
}

func (s ClientConnectionRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClientConnectionRequest) DecodeFromPtr(p capnp.Ptr) ClientConnectionRequest {
	return ClientConnectionRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClientConnectionRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClientConnectionRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClientConnectionRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClientConnectionRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ClientConnectionRequest_List is a list of ClientConnectionRequest.
type ClientConnectionRequest_List = capnp.StructList[ClientConnectionRequest]

// NewClientConnectionRequest creates a new list of ClientConnectionRequest.
func NewClientConnectionRequest_List(s *capnp.Segment, sz int32) (ClientConnectionRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ClientConnectionRequest](l), err
}

// ClientConnectionRequest_Future is a wrapper for a ClientConnectionRequest promised by a client call.
type ClientConnectionRequest_Future struct{ *capnp.Future }

func (f ClientConnectionRequest_Future) Struct() (ClientConnectionRequest, error) {
	p, err := f.Future.Ptr()
	return ClientConnectionRequest(p.Struct()), err
}

type ClientConnectionResponse capnp.Struct

// ClientConnectionResponse_TypeID is the unique identifier for the type ClientConnectionResponse.
const ClientConnectionResponse_TypeID = 0x96ab4e0b79afcb59

func NewClientConnectionResponse(s *capnp.Segment) (ClientConnectionResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ClientConnectionResponse(st), err
}

func NewRootClientConnectionResponse(s *capnp.Segment) (ClientConnectionResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ClientConnectionResponse(st), err
}

func ReadRootClientConnectionResponse(msg *capnp.Message) (ClientConnectionResponse, error) {
	root, err := msg.Root()
	return ClientConnectionResponse(root.Struct()), err
}

func (s ClientConnectionResponse) String() string {
	str, _ := text.Marshal(0x96ab4e0b79afcb59, capnp.Struct(s))
	return str
}

func (s ClientConnectionResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClientConnectionResponse) DecodeFromPtr(p capnp.Ptr) ClientConnectionResponse {
	return ClientConnectionResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClientConnectionResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClientConnectionResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClientConnectionResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClientConnectionResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClientConnectionResponse) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ClientConnectionResponse) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClientConnectionResponse) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ClientConnectionResponse) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ClientConnectionResponse) Position() (Vector, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Vector(p.Struct()), err
}

func (s ClientConnectionResponse) HasPosition() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ClientConnectionResponse) SetPosition(v Vector) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewPosition sets the position field to a newly
// allocated Vector struct, preferring placement in s's segment.
func (s ClientConnectionResponse) NewPosition() (Vector, error) {
	ss, err := NewVector(capnp.Struct(s).Segment())
	if err != nil {
		return Vector{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ClientConnectionResponse) MapData() (MapData, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return MapData(p.Struct()), err
}

func (s ClientConnectionResponse) HasMapData() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ClientConnectionResponse) SetMapData(v MapData) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewMapData sets the mapData field to a newly
// allocated MapData struct, preferring placement in s's segment.
func (s ClientConnectionResponse) NewMapData() (MapData, error) {
	ss, err := NewMapData(capnp.Struct(s).Segment())
	if err != nil {
		return MapData{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ClientConnectionResponse_List is a list of ClientConnectionResponse.
type ClientConnectionResponse_List = capnp.StructList[ClientConnectionResponse]

// NewClientConnectionResponse creates a new list of ClientConnectionResponse.
func NewClientConnectionResponse_List(s *capnp.Segment, sz int32) (ClientConnectionResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[ClientConnectionResponse](l), err
}

// ClientConnectionResponse_Future is a wrapper for a ClientConnectionResponse promised by a client call.
type ClientConnectionResponse_Future struct{ *capnp.Future }

func (f ClientConnectionResponse_Future) Struct() (ClientConnectionResponse, error) {
	p, err := f.Future.Ptr()
	return ClientConnectionResponse(p.Struct()), err
}
func (p ClientConnectionResponse_Future) Position() Vector_Future {
	return Vector_Future{Future: p.Future.Field(1, nil)}
}
func (p ClientConnectionResponse_Future) MapData() MapData_Future {
	return MapData_Future{Future: p.Future.Field(2, nil)}
}

const schema_b81e0a7d72638bf1 = "x\xda\xb4\x95_h[U\x1c\xc7\x7f\xdfs\xee\xcd-" +
	"31Io\x04\x11\x15\x1c\x0eZ\xdd\xb45\x0eFQ" +
	"\xb2v\x19\x9aa$\xc7Y\x9d\x7f\xd7\xb3\xe4\xdaf4" +
	"\xb9\xb7\xb9\xb7[#\x8e\x8a\x0aE}V\x18N\xf0\xc1" +
	"=\x0c\x91\x81C)\xc2@\x05e \xfb\xe3\xab\xf3I" +
	"Pa>\xeda\x8a\xa2\xbdrN\x92\x9b4\xc4\xd8\x17" +
	"\x9f\x02\xbf|\xce\xfd~\x7f\xff\xce\x99\x98c{\x8d\xc9" +
	"\xc4\x9aIL\xec5c\xe1\x9e\x91\xdbO}\x15{t" +
	"\x8d\xd2\x19\x84\xd7\xdf.7Nl\xbbs\x9d\x0c\x8b(" +
	"{\x86\x1d\x81}\x9eY\xc4\xc3g\xbe=\xdb\xbc\xe9\xf1" +
	"\x8f\xde\xddL\x99\\a'\xd9Q\xd8\x1f3\x8b\xc8>" +
	"\xc3\xce\x12\xc2icg\xe5\xf0\xefO\x7f@\"\x83^" +
	"\x1a\x0a)\xf0?\xedYu\xce\x16\xfc8!|\xff\xf4" +
	"\xab\xd7\xbd\x95\xab\x1f\x0e\x82\xb3\x9fr\x06\xfbKM\x9f" +
	"\xd7\xf4\x1c\xbbt\xe8\xf8'\x17?\x1bH\xdfa0\xd8" +
	"\xe3\xca\xba\xbd\xc3P\xf4\xb5+\xaf\x7f~\xe3\xbdS\xeb" +
	"\x03\xe97\x8dm\xb0Oj\xfa\x1dM_\xb9\xad\x11\xff" +
	"\xf5\xdc\xd5/\xfar\xd4\xf0\x0dc;l\xd3T0\xcc" +
	"\x1c!<\xfc\xdc\xe4\x89K\xa7o\xbd0\x00\xb6w\x9b" +
	"?\xda\xd3\x9a}X\xb3\x85\xc2\xfa<\x9f\xc9^\xeec" +
	"U\xc5\xb2/\x983\xb0k\x1a\xae\x9a\xca\xc5(\xbf\xf0" +
	"\xd2\xe87k?\xf5y\xd6>\xbf6\xbf\xb7\xbf\xd3\xec" +
	"E\xcdn\\>\xf7$\x7f\xf1\xdao}\xec~X\x06" +
	"Qv<\xc6`\xef\x8e)|2\xf6\x0b!\xbc\xf7\x81" +
	"\xa9\x9f\xdf\xfaa\xec\x8fA\x09\xdebM\xc1\xdea)" +
	"\xf8.+G\xbb\xc2\xb2[\xab\xb9\xf5\xfb\xcb\x86\xfe\xbd" +
	"\xaf,\xbd\xba7\xb5o\xb1\xea\xd4\x83}n\xbd\xee\x94" +
	"\x83\xaa[\x7f\xc2YZ\xb6\x1c?(\x01[=\xe0{" +
	"I\xb7\xee;%@\xc4\xb9Ad\x80(\xbd\xff\x00\x91" +
	"\xc8s\x88\x12C\x1a\xc8@\x05\x8b*\xf8\x18\x878\xc4" +
	"\x90f,\x03F\x94\x9e\x9d!\x12%\x0e\xf1<CX" +
	"\xd6_/\xe4\x89\x08qb\x88\x13B\xcf\xf5\xabJI" +
	"\xc5R\xddj\x12\x90\"\xac\xd6\xa4\x97\x97\x81D\xaa\xdb" +
	"\xc0\xd6?\x91}\xd6k\xbf\xb4(\x9b9\xa7Qt\x8f" +
	"i\xc3#\x91\xe1q\xe5m\x8cC<\xc8\xd0\xf1;\xa9" +
	"b\x13\x1c\xe2!\x86\xd0[\x94M\xa7\xd1\xb2f\x10\x83" +
	"\xf1_\xd6\"\x03|S\xfd\x16dPt|_\xce;" +
	"\xb4\x05\x07\xf7\x10\x89\x9d\x1cb\xcf`\x07\xc9\xc0Y\x09" +
	"\xa2J\x0d\x14,\xe9S\x07\x03\x19lI\xf0\x7fH\xb9" +
	"\xe5`\xba\xdc:\xb6\x05\x0fS\xc3\x93\xceI\xfd\xa9\xe1" +
	"i?\"k\x8eNz\xd6\xabX2\xd0\xdd6\"\xd9" +
	"\xc4Q\"\x11\xe7\x10c\x91\xc4\xc1\x80\x922p|\xdc" +
	"L(q \xd5\xbd\x9a\x08*8x\xa0\x8a\xd2\xcb[" +
	"2\x90}\xdfW}\x1b\xe1\x10\x19\x86\xa4_}\xd9\x19" +
	"R\xab\xbe\xf5Z\xf6\x03\xa7q\xc0\xad\xea\xcdR\x8b\xd5" +
	"_1\xb5/ws\x88\x89\x9e\xcd\xda\xb5\xbd[\xc6U" +
	"\x7fA6*\x85|\xa7>\x96\xe7\xfaC\xe47e\xf3" +
	"\x94S\x0e\xb8\xdb\xe8S\x1c\x1d\xa48\xda\xd3\xb8\x95N" +
	"k\xd0\x8c\x06\xe5_\xbb\xd2;\xfd)n\xc4\xc3P\xab" +
	"\xc8g\x89\xc4\x1c\x87XdH`#l\xc9TU\xa3" +
	"\x168D\xc0\x90`\x7f\x87\xad;c\xe95\"\xe1q" +
	"\x88W\x18\x12\xfc\xaf0\x03N\x94n\x1e!\x12+\x1c" +
	"\xe2\x8d\xa8\xa9E\x97\xf81U\xfc\xe8\x05kg\xef\xb5" +
	"g\x92\x92z\x94R\xdd\x97\xa5\x0d\xcc\xb7\xe7\x07j\x80" +
	"\xd4\xee \xd5}O:%l\xef2Yr^\x89D" +
	"/\xdf\xd0\x0b\xa0\xa7\xc39gi\xb9u\xd9\xf6\xce\xce" +
	"LwvVe\xa5\xd2p|\xbf\xd3\xcb\x7f\x02\x00\x00" +
	"\xff\xff\x1dX\x078"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_b81e0a7d72638bf1,
		Nodes: []uint64{
			0x874806c29c1c0838,
			0x96ab4e0b79afcb59,
			0xa057f75f642c0441,
			0xa4db7870f180a59d,
			0xb6cdb27758ce0260,
			0xb89c9bf5ba83d0ea,
			0xc0dbb3eb0c721ad0,
			0xc818a5ce7d315b5f,
			0xcf33420367b84949,
			0xe587c61266c80312,
			0xf6ea5e0354b3cffe,
			0xf928dc8ae63a322b,
		},
		Compressed: true,
	})
}
