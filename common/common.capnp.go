// Code generated by capnpc-go. DO NOT EDIT.

package common

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
)

type GameMessage capnp.Struct
type GameMessage_Which uint16

const (
	GameMessage_Which_playerMove      GameMessage_Which = 0
	GameMessage_Which_playerAction    GameMessage_Which = 1
	GameMessage_Which_gameStateUpdate GameMessage_Which = 2
	GameMessage_Which_chatMessage     GameMessage_Which = 3
)

func (w GameMessage_Which) String() string {
	const s = "playerMoveplayerActiongameStateUpdatechatMessage"
	switch w {
	case GameMessage_Which_playerMove:
		return s[0:10]
	case GameMessage_Which_playerAction:
		return s[10:22]
	case GameMessage_Which_gameStateUpdate:
		return s[22:37]
	case GameMessage_Which_chatMessage:
		return s[37:48]

	}
	return "GameMessage_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// GameMessage_TypeID is the unique identifier for the type GameMessage.
const GameMessage_TypeID = 0xf6ea5e0354b3cffe

func NewGameMessage(s *capnp.Segment) (GameMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GameMessage(st), err
}

func NewRootGameMessage(s *capnp.Segment) (GameMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GameMessage(st), err
}

func ReadRootGameMessage(msg *capnp.Message) (GameMessage, error) {
	root, err := msg.Root()
	return GameMessage(root.Struct()), err
}

func (s GameMessage) String() string {
	str, _ := text.Marshal(0xf6ea5e0354b3cffe, capnp.Struct(s))
	return str
}

func (s GameMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GameMessage) DecodeFromPtr(p capnp.Ptr) GameMessage {
	return GameMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GameMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s GameMessage) Which() GameMessage_Which {
	return GameMessage_Which(capnp.Struct(s).Uint16(0))
}
func (s GameMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GameMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GameMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GameMessage) PlayerMove() (PlayerMove, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != playerMove")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return PlayerMove(p.Struct()), err
}

func (s GameMessage) HasPlayerMove() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s GameMessage) SetPlayerMove(v PlayerMove) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPlayerMove sets the playerMove field to a newly
// allocated PlayerMove struct, preferring placement in s's segment.
func (s GameMessage) NewPlayerMove() (PlayerMove, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewPlayerMove(capnp.Struct(s).Segment())
	if err != nil {
		return PlayerMove{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s GameMessage) PlayerAction() (PlayerAction, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != playerAction")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return PlayerAction(p.Struct()), err
}

func (s GameMessage) HasPlayerAction() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s GameMessage) SetPlayerAction(v PlayerAction) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPlayerAction sets the playerAction field to a newly
// allocated PlayerAction struct, preferring placement in s's segment.
func (s GameMessage) NewPlayerAction() (PlayerAction, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewPlayerAction(capnp.Struct(s).Segment())
	if err != nil {
		return PlayerAction{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s GameMessage) GameStateUpdate() (GameStateUpdate, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != gameStateUpdate")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return GameStateUpdate(p.Struct()), err
}

func (s GameMessage) HasGameStateUpdate() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s GameMessage) SetGameStateUpdate(v GameStateUpdate) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGameStateUpdate sets the gameStateUpdate field to a newly
// allocated GameStateUpdate struct, preferring placement in s's segment.
func (s GameMessage) NewGameStateUpdate() (GameStateUpdate, error) {
	capnp.Struct(s).SetUint16(0, 2)
	ss, err := NewGameStateUpdate(capnp.Struct(s).Segment())
	if err != nil {
		return GameStateUpdate{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s GameMessage) ChatMessage() (ChatMessage, error) {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != chatMessage")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return ChatMessage(p.Struct()), err
}

func (s GameMessage) HasChatMessage() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s GameMessage) SetChatMessage(v ChatMessage) error {
	capnp.Struct(s).SetUint16(0, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewChatMessage sets the chatMessage field to a newly
// allocated ChatMessage struct, preferring placement in s's segment.
func (s GameMessage) NewChatMessage() (ChatMessage, error) {
	capnp.Struct(s).SetUint16(0, 3)
	ss, err := NewChatMessage(capnp.Struct(s).Segment())
	if err != nil {
		return ChatMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// GameMessage_List is a list of GameMessage.
type GameMessage_List = capnp.StructList[GameMessage]

// NewGameMessage creates a new list of GameMessage.
func NewGameMessage_List(s *capnp.Segment, sz int32) (GameMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[GameMessage](l), err
}

// GameMessage_Future is a wrapper for a GameMessage promised by a client call.
type GameMessage_Future struct{ *capnp.Future }

func (f GameMessage_Future) Struct() (GameMessage, error) {
	p, err := f.Future.Ptr()
	return GameMessage(p.Struct()), err
}
func (p GameMessage_Future) PlayerMove() PlayerMove_Future {
	return PlayerMove_Future{Future: p.Future.Field(0, nil)}
}
func (p GameMessage_Future) PlayerAction() PlayerAction_Future {
	return PlayerAction_Future{Future: p.Future.Field(0, nil)}
}
func (p GameMessage_Future) GameStateUpdate() GameStateUpdate_Future {
	return GameStateUpdate_Future{Future: p.Future.Field(0, nil)}
}
func (p GameMessage_Future) ChatMessage() ChatMessage_Future {
	return ChatMessage_Future{Future: p.Future.Field(0, nil)}
}

type Position capnp.Struct

// Position_TypeID is the unique identifier for the type Position.
const Position_TypeID = 0x82c063683577d7ae

func NewPosition(s *capnp.Segment) (Position, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Position(st), err
}

func NewRootPosition(s *capnp.Segment) (Position, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Position(st), err
}

func ReadRootPosition(msg *capnp.Message) (Position, error) {
	root, err := msg.Root()
	return Position(root.Struct()), err
}

func (s Position) String() string {
	str, _ := text.Marshal(0x82c063683577d7ae, capnp.Struct(s))
	return str
}

func (s Position) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Position) DecodeFromPtr(p capnp.Ptr) Position {
	return Position(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Position) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Position) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Position) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Position) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Position) X() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Position) SetX(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Position) Y() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Position) SetY(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// Position_List is a list of Position.
type Position_List = capnp.StructList[Position]

// NewPosition creates a new list of Position.
func NewPosition_List(s *capnp.Segment, sz int32) (Position_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Position](l), err
}

// Position_Future is a wrapper for a Position promised by a client call.
type Position_Future struct{ *capnp.Future }

func (f Position_Future) Struct() (Position, error) {
	p, err := f.Future.Ptr()
	return Position(p.Struct()), err
}

type PlayerMove capnp.Struct

// PlayerMove_TypeID is the unique identifier for the type PlayerMove.
const PlayerMove_TypeID = 0xa057f75f642c0441

func NewPlayerMove(s *capnp.Segment) (PlayerMove, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PlayerMove(st), err
}

func NewRootPlayerMove(s *capnp.Segment) (PlayerMove, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PlayerMove(st), err
}

func ReadRootPlayerMove(msg *capnp.Message) (PlayerMove, error) {
	root, err := msg.Root()
	return PlayerMove(root.Struct()), err
}

func (s PlayerMove) String() string {
	str, _ := text.Marshal(0xa057f75f642c0441, capnp.Struct(s))
	return str
}

func (s PlayerMove) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PlayerMove) DecodeFromPtr(p capnp.Ptr) PlayerMove {
	return PlayerMove(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PlayerMove) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PlayerMove) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PlayerMove) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PlayerMove) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PlayerMove) PlayerId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PlayerMove) SetPlayerId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PlayerMove) Position() (Position, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Position(p.Struct()), err
}

func (s PlayerMove) HasPosition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PlayerMove) SetPosition(v Position) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPosition sets the position field to a newly
// allocated Position struct, preferring placement in s's segment.
func (s PlayerMove) NewPosition() (Position, error) {
	ss, err := NewPosition(capnp.Struct(s).Segment())
	if err != nil {
		return Position{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// PlayerMove_List is a list of PlayerMove.
type PlayerMove_List = capnp.StructList[PlayerMove]

// NewPlayerMove creates a new list of PlayerMove.
func NewPlayerMove_List(s *capnp.Segment, sz int32) (PlayerMove_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[PlayerMove](l), err
}

// PlayerMove_Future is a wrapper for a PlayerMove promised by a client call.
type PlayerMove_Future struct{ *capnp.Future }

func (f PlayerMove_Future) Struct() (PlayerMove, error) {
	p, err := f.Future.Ptr()
	return PlayerMove(p.Struct()), err
}
func (p PlayerMove_Future) Position() Position_Future {
	return Position_Future{Future: p.Future.Field(0, nil)}
}

type PlayerAction capnp.Struct

// PlayerAction_TypeID is the unique identifier for the type PlayerAction.
const PlayerAction_TypeID = 0xb89c9bf5ba83d0ea

func NewPlayerAction(s *capnp.Segment) (PlayerAction, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PlayerAction(st), err
}

func NewRootPlayerAction(s *capnp.Segment) (PlayerAction, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PlayerAction(st), err
}

func ReadRootPlayerAction(msg *capnp.Message) (PlayerAction, error) {
	root, err := msg.Root()
	return PlayerAction(root.Struct()), err
}

func (s PlayerAction) String() string {
	str, _ := text.Marshal(0xb89c9bf5ba83d0ea, capnp.Struct(s))
	return str
}

func (s PlayerAction) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PlayerAction) DecodeFromPtr(p capnp.Ptr) PlayerAction {
	return PlayerAction(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PlayerAction) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PlayerAction) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PlayerAction) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PlayerAction) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PlayerAction) PlayerId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PlayerAction) SetPlayerId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PlayerAction) Action() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s PlayerAction) HasAction() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PlayerAction) ActionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s PlayerAction) SetAction(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// PlayerAction_List is a list of PlayerAction.
type PlayerAction_List = capnp.StructList[PlayerAction]

// NewPlayerAction creates a new list of PlayerAction.
func NewPlayerAction_List(s *capnp.Segment, sz int32) (PlayerAction_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[PlayerAction](l), err
}

// PlayerAction_Future is a wrapper for a PlayerAction promised by a client call.
type PlayerAction_Future struct{ *capnp.Future }

func (f PlayerAction_Future) Struct() (PlayerAction, error) {
	p, err := f.Future.Ptr()
	return PlayerAction(p.Struct()), err
}

type GameStateUpdate capnp.Struct

// GameStateUpdate_TypeID is the unique identifier for the type GameStateUpdate.
const GameStateUpdate_TypeID = 0xc0dbb3eb0c721ad0

func NewGameStateUpdate(s *capnp.Segment) (GameStateUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GameStateUpdate(st), err
}

func NewRootGameStateUpdate(s *capnp.Segment) (GameStateUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GameStateUpdate(st), err
}

func ReadRootGameStateUpdate(msg *capnp.Message) (GameStateUpdate, error) {
	root, err := msg.Root()
	return GameStateUpdate(root.Struct()), err
}

func (s GameStateUpdate) String() string {
	str, _ := text.Marshal(0xc0dbb3eb0c721ad0, capnp.Struct(s))
	return str
}

func (s GameStateUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GameStateUpdate) DecodeFromPtr(p capnp.Ptr) GameStateUpdate {
	return GameStateUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GameStateUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GameStateUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GameStateUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GameStateUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GameStateUpdate) PlayerStates() (PlayerState_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return PlayerState_List(p.List()), err
}

func (s GameStateUpdate) HasPlayerStates() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GameStateUpdate) SetPlayerStates(v PlayerState_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPlayerStates sets the playerStates field to a newly
// allocated PlayerState_List, preferring placement in s's segment.
func (s GameStateUpdate) NewPlayerStates(n int32) (PlayerState_List, error) {
	l, err := NewPlayerState_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return PlayerState_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// GameStateUpdate_List is a list of GameStateUpdate.
type GameStateUpdate_List = capnp.StructList[GameStateUpdate]

// NewGameStateUpdate creates a new list of GameStateUpdate.
func NewGameStateUpdate_List(s *capnp.Segment, sz int32) (GameStateUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[GameStateUpdate](l), err
}

// GameStateUpdate_Future is a wrapper for a GameStateUpdate promised by a client call.
type GameStateUpdate_Future struct{ *capnp.Future }

func (f GameStateUpdate_Future) Struct() (GameStateUpdate, error) {
	p, err := f.Future.Ptr()
	return GameStateUpdate(p.Struct()), err
}

type PlayerState capnp.Struct

// PlayerState_TypeID is the unique identifier for the type PlayerState.
const PlayerState_TypeID = 0xb6cdb27758ce0260

func NewPlayerState(s *capnp.Segment) (PlayerState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PlayerState(st), err
}

func NewRootPlayerState(s *capnp.Segment) (PlayerState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PlayerState(st), err
}

func ReadRootPlayerState(msg *capnp.Message) (PlayerState, error) {
	root, err := msg.Root()
	return PlayerState(root.Struct()), err
}

func (s PlayerState) String() string {
	str, _ := text.Marshal(0xb6cdb27758ce0260, capnp.Struct(s))
	return str
}

func (s PlayerState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PlayerState) DecodeFromPtr(p capnp.Ptr) PlayerState {
	return PlayerState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PlayerState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PlayerState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PlayerState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PlayerState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PlayerState) PlayerId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PlayerState) SetPlayerId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PlayerState) Position() (Position, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Position(p.Struct()), err
}

func (s PlayerState) HasPosition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PlayerState) SetPosition(v Position) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPosition sets the position field to a newly
// allocated Position struct, preferring placement in s's segment.
func (s PlayerState) NewPosition() (Position, error) {
	ss, err := NewPosition(capnp.Struct(s).Segment())
	if err != nil {
		return Position{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// PlayerState_List is a list of PlayerState.
type PlayerState_List = capnp.StructList[PlayerState]

// NewPlayerState creates a new list of PlayerState.
func NewPlayerState_List(s *capnp.Segment, sz int32) (PlayerState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[PlayerState](l), err
}

// PlayerState_Future is a wrapper for a PlayerState promised by a client call.
type PlayerState_Future struct{ *capnp.Future }

func (f PlayerState_Future) Struct() (PlayerState, error) {
	p, err := f.Future.Ptr()
	return PlayerState(p.Struct()), err
}
func (p PlayerState_Future) Position() Position_Future {
	return Position_Future{Future: p.Future.Field(0, nil)}
}

type ChatMessage capnp.Struct

// ChatMessage_TypeID is the unique identifier for the type ChatMessage.
const ChatMessage_TypeID = 0xa4db7870f180a59d

func NewChatMessage(s *capnp.Segment) (ChatMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ChatMessage(st), err
}

func NewRootChatMessage(s *capnp.Segment) (ChatMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ChatMessage(st), err
}

func ReadRootChatMessage(msg *capnp.Message) (ChatMessage, error) {
	root, err := msg.Root()
	return ChatMessage(root.Struct()), err
}

func (s ChatMessage) String() string {
	str, _ := text.Marshal(0xa4db7870f180a59d, capnp.Struct(s))
	return str
}

func (s ChatMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ChatMessage) DecodeFromPtr(p capnp.Ptr) ChatMessage {
	return ChatMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ChatMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ChatMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ChatMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ChatMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ChatMessage) PlayerId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ChatMessage) SetPlayerId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ChatMessage) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ChatMessage) HasText() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ChatMessage) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ChatMessage) SetText(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ChatMessage_List is a list of ChatMessage.
type ChatMessage_List = capnp.StructList[ChatMessage]

// NewChatMessage creates a new list of ChatMessage.
func NewChatMessage_List(s *capnp.Segment, sz int32) (ChatMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ChatMessage](l), err
}

// ChatMessage_Future is a wrapper for a ChatMessage promised by a client call.
type ChatMessage_Future struct{ *capnp.Future }

func (f ChatMessage_Future) Struct() (ChatMessage, error) {
	p, err := f.Future.Ptr()
	return ChatMessage(p.Struct()), err
}

type ClusterJoinRequest capnp.Struct

// ClusterJoinRequest_TypeID is the unique identifier for the type ClusterJoinRequest.
const ClusterJoinRequest_TypeID = 0xf928dc8ae63a322b

func NewClusterJoinRequest(s *capnp.Segment) (ClusterJoinRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClusterJoinRequest(st), err
}

func NewRootClusterJoinRequest(s *capnp.Segment) (ClusterJoinRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClusterJoinRequest(st), err
}

func ReadRootClusterJoinRequest(msg *capnp.Message) (ClusterJoinRequest, error) {
	root, err := msg.Root()
	return ClusterJoinRequest(root.Struct()), err
}

func (s ClusterJoinRequest) String() string {
	str, _ := text.Marshal(0xf928dc8ae63a322b, capnp.Struct(s))
	return str
}

func (s ClusterJoinRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClusterJoinRequest) DecodeFromPtr(p capnp.Ptr) ClusterJoinRequest {
	return ClusterJoinRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClusterJoinRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClusterJoinRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClusterJoinRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClusterJoinRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClusterJoinRequest) Address() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ClusterJoinRequest) HasAddress() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClusterJoinRequest) AddressBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ClusterJoinRequest) SetAddress(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ClusterJoinRequest_List is a list of ClusterJoinRequest.
type ClusterJoinRequest_List = capnp.StructList[ClusterJoinRequest]

// NewClusterJoinRequest creates a new list of ClusterJoinRequest.
func NewClusterJoinRequest_List(s *capnp.Segment, sz int32) (ClusterJoinRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ClusterJoinRequest](l), err
}

// ClusterJoinRequest_Future is a wrapper for a ClusterJoinRequest promised by a client call.
type ClusterJoinRequest_Future struct{ *capnp.Future }

func (f ClusterJoinRequest_Future) Struct() (ClusterJoinRequest, error) {
	p, err := f.Future.Ptr()
	return ClusterJoinRequest(p.Struct()), err
}

type ClusterJoinResponse capnp.Struct

// ClusterJoinResponse_TypeID is the unique identifier for the type ClusterJoinResponse.
const ClusterJoinResponse_TypeID = 0xcf33420367b84949

func NewClusterJoinResponse(s *capnp.Segment) (ClusterJoinResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ClusterJoinResponse(st), err
}

func NewRootClusterJoinResponse(s *capnp.Segment) (ClusterJoinResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ClusterJoinResponse(st), err
}

func ReadRootClusterJoinResponse(msg *capnp.Message) (ClusterJoinResponse, error) {
	root, err := msg.Root()
	return ClusterJoinResponse(root.Struct()), err
}

func (s ClusterJoinResponse) String() string {
	str, _ := text.Marshal(0xcf33420367b84949, capnp.Struct(s))
	return str
}

func (s ClusterJoinResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClusterJoinResponse) DecodeFromPtr(p capnp.Ptr) ClusterJoinResponse {
	return ClusterJoinResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClusterJoinResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClusterJoinResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClusterJoinResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClusterJoinResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClusterJoinResponse) ShardId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ClusterJoinResponse) HasShardId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClusterJoinResponse) ShardIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ClusterJoinResponse) SetShardId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ClusterJoinResponse) Pos() (Position, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Position(p.Struct()), err
}

func (s ClusterJoinResponse) HasPos() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ClusterJoinResponse) SetPos(v Position) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewPos sets the pos field to a newly
// allocated Position struct, preferring placement in s's segment.
func (s ClusterJoinResponse) NewPos() (Position, error) {
	ss, err := NewPosition(capnp.Struct(s).Segment())
	if err != nil {
		return Position{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ClusterJoinResponse_List is a list of ClusterJoinResponse.
type ClusterJoinResponse_List = capnp.StructList[ClusterJoinResponse]

// NewClusterJoinResponse creates a new list of ClusterJoinResponse.
func NewClusterJoinResponse_List(s *capnp.Segment, sz int32) (ClusterJoinResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[ClusterJoinResponse](l), err
}

// ClusterJoinResponse_Future is a wrapper for a ClusterJoinResponse promised by a client call.
type ClusterJoinResponse_Future struct{ *capnp.Future }

func (f ClusterJoinResponse_Future) Struct() (ClusterJoinResponse, error) {
	p, err := f.Future.Ptr()
	return ClusterJoinResponse(p.Struct()), err
}
func (p ClusterJoinResponse_Future) Pos() Position_Future {
	return Position_Future{Future: p.Future.Field(1, nil)}
}

const schema_b81e0a7d72638bf1 = "x\xda\xb4\x94OhSK\x14\xc6\xcf\x99\x99\xbc\x94\x92" +
	"\xbc&\xeff\xf5\x16oQ\x9eP\xb5\xd5\xd6\xb4 A" +
	"\x88\xad\x14I\xa1\x90\xb1\x8a\"\xa8\x1d\x93!\x89\xa4\xb9" +
	"\xb7\xb9\xb7m\x02J\xb5\xeaB]\xb9p\xa5\x82\x0b\xdd" +
	"\xba\xb0 \xc5U\xb7]h\xbb\x11)\xd5\xa5\x8a\xd5M" +
	"\x17U\x14\xdb+3\xcd?\xd3\xb4d\xe3\xea^\x0e\xbf" +
	"\x99\xef\xfb\xe6\xcc\x9c\xee/x\x94\xf5\xf8\xa7\x19\x10\xde" +
	"\xeb\xf9\xcb}\xfaf\xaa/\x9d\x98\x9f\x01\x1eBt\xd7" +
	"\xee$\xf2WZ\xff\x9b\x03\xe6\x050\xf6\x90U\xa3\x87" +
	"\xa8\xbf.2\x05\xe8\xf6\xb3\xce\xe4\x85o\xa7\x1f\xd5\xb1" +
	"\x1eT\xc8-\xf2\xc3\xb8\xa7\xe1\xbb\x1a~\xf8\xe4\xea\x9a" +
	"UXy\xdc\x08\x0e\xaf\x13\x82\x06REohz\x94" +
	"\xbc:3\xf5\xec\xe5\xf3\x86\xf49J\xd0\xc8hZR" +
	"E\xaf.]\x7f\xb1~\xff\xc1\\Cz\x81\xb6\xa2\xb1" +
	"\xac\xe9\xd7\x9a^\xfa7\xef\xfb<\xbb2\x0f\xc1\xd06" +
	"\xb8\x8f\xb5\xa31\xa8\xd3\xf6\xb3(\xa0\x1b\x8b\xcd\xa5\xe8" +
	"@x\xb1\x0eV\xc1\xc2\x13l\x00\x8d\x9b\x1a\xbe\xc6\xd4" +
	"\xce\x9b\x8b\xb3'\xe9\xf9\xd5\xafu>\x06\xd1\xcb\x00\xc2" +
	"\xef\x18A\xe3\x93\xc6\xdf\xb3\x8f\x80\xee\xfeC\x91\x0f\xb7" +
	"\xdfv|odd\xc1\x13Ac\xd9\xa3]{\xa2\xd0" +
	"\xe5&\xcc\xb113w0A\xf4\xf7@BX9+" +
	"\x127\xedL\x9b\x931sqD\xdeB\x19\x00C\x80" +
	"\xe0\xde\x7f\x00\xf8\xff\x14y7\xc1 b\x08U\xb1K" +
	"\x15;(\xf2^\x82X@\x06\x04\x19 \x16\xcb\x7f;" +
	"(dE1*\xf3\xc3\xe6\xa4\xac\xd3\x18\xaa\xd9\xae$" +
	"\xd1\xa3j\xdd\x14\xf9\x11\x82\xae\x95\x15E\x99\x8f%\x01" +
	"\xa0\"a\x99vF\xd9U\xb5@\xf5\xae\x01b\xa0\xc6" +
	"\x00\xad5p,-\x9cai\xdb\"%\xa1\x09\x07\xfb" +
	"\x00x'E~\xb8\xb1\x836G\x16\x1c\xf4\x01A\xdf" +
	"N\x82q\xbdj\xc4\x11NS\x82\x7f \xf2\x96\x83\xfe" +
	"\xc4\xd6\xb2&<Dv\x0f\x1d\x15z\xab\xddc\x1f\x17" +
	"cR\x87>e%\xbd\xc2\xd1\xddf\x15Y\xff%\x00" +
	"\xee\xa3\xc8;*\x12#\x0e\xb4\x09G\xda\xf87`\x9c" +
	"\"\x06\xaa\x8f\x16P\x15+:\xec\xb7~f'lG" +
	"\xe6\x87\xccL\xee\x84\xb4-3go;\xe6\x81F\xb7" +
	"\xb7\xbd\x9a{\xdaN\x8b|2\x96,\x07\xf2Z\xa6\xdd" +
	"\xec\xd9\xaa\x98\xb5\xd7)@\x99\xcfu\xb5\xae8\x0b\xc0" +
	"G)\xf2,A?n\xba[\xc2\x19\x95<M\x91;" +
	"\x04\xfdd\xc3\x0d!\x01\x08\x8e\xcf\x00p\x8b\"\xbfL" +
	"\xd0O\x7f\xba!\xa4\x00\xc1\xe2E\x00^\xa0\xc8oT" +
	"Ni\xd8\x04:)1P\x1d\x96%wV\xa9\xc9\xa0" +
	"\xdf/\x06\xaaC\xac\x04\xa4J\x0dA\xd5\x11u\x191" +
	"P\x1d]\xe5\x88\xa5\xc7\x01^\x91R\"\x95!\xbb\xeb" +
	"\x8b\xaa\xe9@T\x8eOH\xdb\xa9k\xb6j@\x0bE" +
	"\x1e\"8-\x92\xc9\xbc\xb4\xed\xf2Y\xff\x0a\x00\x00\xff" +
	"\xff\xfa\x05\x98\x13"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_b81e0a7d72638bf1,
		Nodes: []uint64{
			0x82c063683577d7ae,
			0xa057f75f642c0441,
			0xa4db7870f180a59d,
			0xb6cdb27758ce0260,
			0xb89c9bf5ba83d0ea,
			0xc0dbb3eb0c721ad0,
			0xcf33420367b84949,
			0xf6ea5e0354b3cffe,
			0xf928dc8ae63a322b,
		},
		Compressed: true,
	})
}
