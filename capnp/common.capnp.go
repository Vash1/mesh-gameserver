// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
)

type GameMessage capnp.Struct
type GameMessage_Which uint16

const (
	GameMessage_Which_playerMove      GameMessage_Which = 0
	GameMessage_Which_playerAction    GameMessage_Which = 1
	GameMessage_Which_gameStateUpdate GameMessage_Which = 2
	GameMessage_Which_chatMessage     GameMessage_Which = 3
)

func (w GameMessage_Which) String() string {
	const s = "playerMoveplayerActiongameStateUpdatechatMessage"
	switch w {
	case GameMessage_Which_playerMove:
		return s[0:10]
	case GameMessage_Which_playerAction:
		return s[10:22]
	case GameMessage_Which_gameStateUpdate:
		return s[22:37]
	case GameMessage_Which_chatMessage:
		return s[37:48]

	}
	return "GameMessage_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// GameMessage_TypeID is the unique identifier for the type GameMessage.
const GameMessage_TypeID = 0xf6ea5e0354b3cffe

func NewGameMessage(s *capnp.Segment) (GameMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GameMessage(st), err
}

func NewRootGameMessage(s *capnp.Segment) (GameMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GameMessage(st), err
}

func ReadRootGameMessage(msg *capnp.Message) (GameMessage, error) {
	root, err := msg.Root()
	return GameMessage(root.Struct()), err
}

func (s GameMessage) String() string {
	str, _ := text.Marshal(0xf6ea5e0354b3cffe, capnp.Struct(s))
	return str
}

func (s GameMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GameMessage) DecodeFromPtr(p capnp.Ptr) GameMessage {
	return GameMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GameMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s GameMessage) Which() GameMessage_Which {
	return GameMessage_Which(capnp.Struct(s).Uint16(0))
}
func (s GameMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GameMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GameMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GameMessage) PlayerMove() (PlayerMove, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != playerMove")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return PlayerMove(p.Struct()), err
}

func (s GameMessage) HasPlayerMove() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s GameMessage) SetPlayerMove(v PlayerMove) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPlayerMove sets the playerMove field to a newly
// allocated PlayerMove struct, preferring placement in s's segment.
func (s GameMessage) NewPlayerMove() (PlayerMove, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewPlayerMove(capnp.Struct(s).Segment())
	if err != nil {
		return PlayerMove{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s GameMessage) PlayerAction() (PlayerAction, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != playerAction")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return PlayerAction(p.Struct()), err
}

func (s GameMessage) HasPlayerAction() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s GameMessage) SetPlayerAction(v PlayerAction) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPlayerAction sets the playerAction field to a newly
// allocated PlayerAction struct, preferring placement in s's segment.
func (s GameMessage) NewPlayerAction() (PlayerAction, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewPlayerAction(capnp.Struct(s).Segment())
	if err != nil {
		return PlayerAction{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s GameMessage) GameStateUpdate() (GameStateUpdate, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != gameStateUpdate")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return GameStateUpdate(p.Struct()), err
}

func (s GameMessage) HasGameStateUpdate() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s GameMessage) SetGameStateUpdate(v GameStateUpdate) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGameStateUpdate sets the gameStateUpdate field to a newly
// allocated GameStateUpdate struct, preferring placement in s's segment.
func (s GameMessage) NewGameStateUpdate() (GameStateUpdate, error) {
	capnp.Struct(s).SetUint16(0, 2)
	ss, err := NewGameStateUpdate(capnp.Struct(s).Segment())
	if err != nil {
		return GameStateUpdate{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s GameMessage) ChatMessage() (ChatMessage, error) {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != chatMessage")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return ChatMessage(p.Struct()), err
}

func (s GameMessage) HasChatMessage() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s GameMessage) SetChatMessage(v ChatMessage) error {
	capnp.Struct(s).SetUint16(0, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewChatMessage sets the chatMessage field to a newly
// allocated ChatMessage struct, preferring placement in s's segment.
func (s GameMessage) NewChatMessage() (ChatMessage, error) {
	capnp.Struct(s).SetUint16(0, 3)
	ss, err := NewChatMessage(capnp.Struct(s).Segment())
	if err != nil {
		return ChatMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// GameMessage_List is a list of GameMessage.
type GameMessage_List = capnp.StructList[GameMessage]

// NewGameMessage creates a new list of GameMessage.
func NewGameMessage_List(s *capnp.Segment, sz int32) (GameMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[GameMessage](l), err
}

// GameMessage_Future is a wrapper for a GameMessage promised by a client call.
type GameMessage_Future struct{ *capnp.Future }

func (f GameMessage_Future) Struct() (GameMessage, error) {
	p, err := f.Future.Ptr()
	return GameMessage(p.Struct()), err
}
func (p GameMessage_Future) PlayerMove() PlayerMove_Future {
	return PlayerMove_Future{Future: p.Future.Field(0, nil)}
}
func (p GameMessage_Future) PlayerAction() PlayerAction_Future {
	return PlayerAction_Future{Future: p.Future.Field(0, nil)}
}
func (p GameMessage_Future) GameStateUpdate() GameStateUpdate_Future {
	return GameStateUpdate_Future{Future: p.Future.Field(0, nil)}
}
func (p GameMessage_Future) ChatMessage() ChatMessage_Future {
	return ChatMessage_Future{Future: p.Future.Field(0, nil)}
}

type Vector capnp.Struct

// Vector_TypeID is the unique identifier for the type Vector.
const Vector_TypeID = 0xe587c61266c80312

func NewVector(s *capnp.Segment) (Vector, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Vector(st), err
}

func NewRootVector(s *capnp.Segment) (Vector, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Vector(st), err
}

func ReadRootVector(msg *capnp.Message) (Vector, error) {
	root, err := msg.Root()
	return Vector(root.Struct()), err
}

func (s Vector) String() string {
	str, _ := text.Marshal(0xe587c61266c80312, capnp.Struct(s))
	return str
}

func (s Vector) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Vector) DecodeFromPtr(p capnp.Ptr) Vector {
	return Vector(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Vector) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Vector) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Vector) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Vector) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Vector) X() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Vector) SetX(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Vector) Y() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Vector) SetY(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// Vector_List is a list of Vector.
type Vector_List = capnp.StructList[Vector]

// NewVector creates a new list of Vector.
func NewVector_List(s *capnp.Segment, sz int32) (Vector_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Vector](l), err
}

// Vector_Future is a wrapper for a Vector promised by a client call.
type Vector_Future struct{ *capnp.Future }

func (f Vector_Future) Struct() (Vector, error) {
	p, err := f.Future.Ptr()
	return Vector(p.Struct()), err
}

type PlayerMove capnp.Struct

// PlayerMove_TypeID is the unique identifier for the type PlayerMove.
const PlayerMove_TypeID = 0xa057f75f642c0441

func NewPlayerMove(s *capnp.Segment) (PlayerMove, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PlayerMove(st), err
}

func NewRootPlayerMove(s *capnp.Segment) (PlayerMove, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PlayerMove(st), err
}

func ReadRootPlayerMove(msg *capnp.Message) (PlayerMove, error) {
	root, err := msg.Root()
	return PlayerMove(root.Struct()), err
}

func (s PlayerMove) String() string {
	str, _ := text.Marshal(0xa057f75f642c0441, capnp.Struct(s))
	return str
}

func (s PlayerMove) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PlayerMove) DecodeFromPtr(p capnp.Ptr) PlayerMove {
	return PlayerMove(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PlayerMove) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PlayerMove) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PlayerMove) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PlayerMove) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PlayerMove) PlayerID() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PlayerMove) SetPlayerID(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PlayerMove) Position() (Vector, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Vector(p.Struct()), err
}

func (s PlayerMove) HasPosition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PlayerMove) SetPosition(v Vector) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPosition sets the position field to a newly
// allocated Vector struct, preferring placement in s's segment.
func (s PlayerMove) NewPosition() (Vector, error) {
	ss, err := NewVector(capnp.Struct(s).Segment())
	if err != nil {
		return Vector{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// PlayerMove_List is a list of PlayerMove.
type PlayerMove_List = capnp.StructList[PlayerMove]

// NewPlayerMove creates a new list of PlayerMove.
func NewPlayerMove_List(s *capnp.Segment, sz int32) (PlayerMove_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[PlayerMove](l), err
}

// PlayerMove_Future is a wrapper for a PlayerMove promised by a client call.
type PlayerMove_Future struct{ *capnp.Future }

func (f PlayerMove_Future) Struct() (PlayerMove, error) {
	p, err := f.Future.Ptr()
	return PlayerMove(p.Struct()), err
}
func (p PlayerMove_Future) Position() Vector_Future {
	return Vector_Future{Future: p.Future.Field(0, nil)}
}

type PlayerAction capnp.Struct

// PlayerAction_TypeID is the unique identifier for the type PlayerAction.
const PlayerAction_TypeID = 0xb89c9bf5ba83d0ea

func NewPlayerAction(s *capnp.Segment) (PlayerAction, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PlayerAction(st), err
}

func NewRootPlayerAction(s *capnp.Segment) (PlayerAction, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PlayerAction(st), err
}

func ReadRootPlayerAction(msg *capnp.Message) (PlayerAction, error) {
	root, err := msg.Root()
	return PlayerAction(root.Struct()), err
}

func (s PlayerAction) String() string {
	str, _ := text.Marshal(0xb89c9bf5ba83d0ea, capnp.Struct(s))
	return str
}

func (s PlayerAction) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PlayerAction) DecodeFromPtr(p capnp.Ptr) PlayerAction {
	return PlayerAction(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PlayerAction) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PlayerAction) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PlayerAction) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PlayerAction) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PlayerAction) PlayerID() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PlayerAction) SetPlayerID(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PlayerAction) Action() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s PlayerAction) HasAction() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PlayerAction) ActionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s PlayerAction) SetAction(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// PlayerAction_List is a list of PlayerAction.
type PlayerAction_List = capnp.StructList[PlayerAction]

// NewPlayerAction creates a new list of PlayerAction.
func NewPlayerAction_List(s *capnp.Segment, sz int32) (PlayerAction_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[PlayerAction](l), err
}

// PlayerAction_Future is a wrapper for a PlayerAction promised by a client call.
type PlayerAction_Future struct{ *capnp.Future }

func (f PlayerAction_Future) Struct() (PlayerAction, error) {
	p, err := f.Future.Ptr()
	return PlayerAction(p.Struct()), err
}

type GameStateUpdate capnp.Struct

// GameStateUpdate_TypeID is the unique identifier for the type GameStateUpdate.
const GameStateUpdate_TypeID = 0xc0dbb3eb0c721ad0

func NewGameStateUpdate(s *capnp.Segment) (GameStateUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GameStateUpdate(st), err
}

func NewRootGameStateUpdate(s *capnp.Segment) (GameStateUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GameStateUpdate(st), err
}

func ReadRootGameStateUpdate(msg *capnp.Message) (GameStateUpdate, error) {
	root, err := msg.Root()
	return GameStateUpdate(root.Struct()), err
}

func (s GameStateUpdate) String() string {
	str, _ := text.Marshal(0xc0dbb3eb0c721ad0, capnp.Struct(s))
	return str
}

func (s GameStateUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GameStateUpdate) DecodeFromPtr(p capnp.Ptr) GameStateUpdate {
	return GameStateUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GameStateUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GameStateUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GameStateUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GameStateUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GameStateUpdate) PlayerStates() (PlayerState_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return PlayerState_List(p.List()), err
}

func (s GameStateUpdate) HasPlayerStates() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GameStateUpdate) SetPlayerStates(v PlayerState_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPlayerStates sets the playerStates field to a newly
// allocated PlayerState_List, preferring placement in s's segment.
func (s GameStateUpdate) NewPlayerStates(n int32) (PlayerState_List, error) {
	l, err := NewPlayerState_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return PlayerState_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// GameStateUpdate_List is a list of GameStateUpdate.
type GameStateUpdate_List = capnp.StructList[GameStateUpdate]

// NewGameStateUpdate creates a new list of GameStateUpdate.
func NewGameStateUpdate_List(s *capnp.Segment, sz int32) (GameStateUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[GameStateUpdate](l), err
}

// GameStateUpdate_Future is a wrapper for a GameStateUpdate promised by a client call.
type GameStateUpdate_Future struct{ *capnp.Future }

func (f GameStateUpdate_Future) Struct() (GameStateUpdate, error) {
	p, err := f.Future.Ptr()
	return GameStateUpdate(p.Struct()), err
}

type PlayerState capnp.Struct

// PlayerState_TypeID is the unique identifier for the type PlayerState.
const PlayerState_TypeID = 0xb6cdb27758ce0260

func NewPlayerState(s *capnp.Segment) (PlayerState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PlayerState(st), err
}

func NewRootPlayerState(s *capnp.Segment) (PlayerState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PlayerState(st), err
}

func ReadRootPlayerState(msg *capnp.Message) (PlayerState, error) {
	root, err := msg.Root()
	return PlayerState(root.Struct()), err
}

func (s PlayerState) String() string {
	str, _ := text.Marshal(0xb6cdb27758ce0260, capnp.Struct(s))
	return str
}

func (s PlayerState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PlayerState) DecodeFromPtr(p capnp.Ptr) PlayerState {
	return PlayerState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PlayerState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PlayerState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PlayerState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PlayerState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PlayerState) PlayerID() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PlayerState) SetPlayerID(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PlayerState) Position() (Vector, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Vector(p.Struct()), err
}

func (s PlayerState) HasPosition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PlayerState) SetPosition(v Vector) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPosition sets the position field to a newly
// allocated Vector struct, preferring placement in s's segment.
func (s PlayerState) NewPosition() (Vector, error) {
	ss, err := NewVector(capnp.Struct(s).Segment())
	if err != nil {
		return Vector{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// PlayerState_List is a list of PlayerState.
type PlayerState_List = capnp.StructList[PlayerState]

// NewPlayerState creates a new list of PlayerState.
func NewPlayerState_List(s *capnp.Segment, sz int32) (PlayerState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[PlayerState](l), err
}

// PlayerState_Future is a wrapper for a PlayerState promised by a client call.
type PlayerState_Future struct{ *capnp.Future }

func (f PlayerState_Future) Struct() (PlayerState, error) {
	p, err := f.Future.Ptr()
	return PlayerState(p.Struct()), err
}
func (p PlayerState_Future) Position() Vector_Future {
	return Vector_Future{Future: p.Future.Field(0, nil)}
}

type ChatMessage capnp.Struct

// ChatMessage_TypeID is the unique identifier for the type ChatMessage.
const ChatMessage_TypeID = 0xa4db7870f180a59d

func NewChatMessage(s *capnp.Segment) (ChatMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ChatMessage(st), err
}

func NewRootChatMessage(s *capnp.Segment) (ChatMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ChatMessage(st), err
}

func ReadRootChatMessage(msg *capnp.Message) (ChatMessage, error) {
	root, err := msg.Root()
	return ChatMessage(root.Struct()), err
}

func (s ChatMessage) String() string {
	str, _ := text.Marshal(0xa4db7870f180a59d, capnp.Struct(s))
	return str
}

func (s ChatMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ChatMessage) DecodeFromPtr(p capnp.Ptr) ChatMessage {
	return ChatMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ChatMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ChatMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ChatMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ChatMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ChatMessage) PlayerID() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ChatMessage) SetPlayerID(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ChatMessage) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ChatMessage) HasText() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ChatMessage) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ChatMessage) SetText(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ChatMessage_List is a list of ChatMessage.
type ChatMessage_List = capnp.StructList[ChatMessage]

// NewChatMessage creates a new list of ChatMessage.
func NewChatMessage_List(s *capnp.Segment, sz int32) (ChatMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ChatMessage](l), err
}

// ChatMessage_Future is a wrapper for a ChatMessage promised by a client call.
type ChatMessage_Future struct{ *capnp.Future }

func (f ChatMessage_Future) Struct() (ChatMessage, error) {
	p, err := f.Future.Ptr()
	return ChatMessage(p.Struct()), err
}

type ClusterJoinRequest capnp.Struct

// ClusterJoinRequest_TypeID is the unique identifier for the type ClusterJoinRequest.
const ClusterJoinRequest_TypeID = 0xf928dc8ae63a322b

func NewClusterJoinRequest(s *capnp.Segment) (ClusterJoinRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClusterJoinRequest(st), err
}

func NewRootClusterJoinRequest(s *capnp.Segment) (ClusterJoinRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClusterJoinRequest(st), err
}

func ReadRootClusterJoinRequest(msg *capnp.Message) (ClusterJoinRequest, error) {
	root, err := msg.Root()
	return ClusterJoinRequest(root.Struct()), err
}

func (s ClusterJoinRequest) String() string {
	str, _ := text.Marshal(0xf928dc8ae63a322b, capnp.Struct(s))
	return str
}

func (s ClusterJoinRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClusterJoinRequest) DecodeFromPtr(p capnp.Ptr) ClusterJoinRequest {
	return ClusterJoinRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClusterJoinRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClusterJoinRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClusterJoinRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClusterJoinRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClusterJoinRequest) Address() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ClusterJoinRequest) HasAddress() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClusterJoinRequest) AddressBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ClusterJoinRequest) SetAddress(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ClusterJoinRequest_List is a list of ClusterJoinRequest.
type ClusterJoinRequest_List = capnp.StructList[ClusterJoinRequest]

// NewClusterJoinRequest creates a new list of ClusterJoinRequest.
func NewClusterJoinRequest_List(s *capnp.Segment, sz int32) (ClusterJoinRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ClusterJoinRequest](l), err
}

// ClusterJoinRequest_Future is a wrapper for a ClusterJoinRequest promised by a client call.
type ClusterJoinRequest_Future struct{ *capnp.Future }

func (f ClusterJoinRequest_Future) Struct() (ClusterJoinRequest, error) {
	p, err := f.Future.Ptr()
	return ClusterJoinRequest(p.Struct()), err
}

type ClusterJoinResponse capnp.Struct

// ClusterJoinResponse_TypeID is the unique identifier for the type ClusterJoinResponse.
const ClusterJoinResponse_TypeID = 0xcf33420367b84949

func NewClusterJoinResponse(s *capnp.Segment) (ClusterJoinResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ClusterJoinResponse(st), err
}

func NewRootClusterJoinResponse(s *capnp.Segment) (ClusterJoinResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ClusterJoinResponse(st), err
}

func ReadRootClusterJoinResponse(msg *capnp.Message) (ClusterJoinResponse, error) {
	root, err := msg.Root()
	return ClusterJoinResponse(root.Struct()), err
}

func (s ClusterJoinResponse) String() string {
	str, _ := text.Marshal(0xcf33420367b84949, capnp.Struct(s))
	return str
}

func (s ClusterJoinResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClusterJoinResponse) DecodeFromPtr(p capnp.Ptr) ClusterJoinResponse {
	return ClusterJoinResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClusterJoinResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClusterJoinResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClusterJoinResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClusterJoinResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClusterJoinResponse) ShardID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ClusterJoinResponse) HasShardID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClusterJoinResponse) ShardIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ClusterJoinResponse) SetShardID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ClusterJoinResponse) Pos() (Vector, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Vector(p.Struct()), err
}

func (s ClusterJoinResponse) HasPos() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ClusterJoinResponse) SetPos(v Vector) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewPos sets the pos field to a newly
// allocated Vector struct, preferring placement in s's segment.
func (s ClusterJoinResponse) NewPos() (Vector, error) {
	ss, err := NewVector(capnp.Struct(s).Segment())
	if err != nil {
		return Vector{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ClusterJoinResponse_List is a list of ClusterJoinResponse.
type ClusterJoinResponse_List = capnp.StructList[ClusterJoinResponse]

// NewClusterJoinResponse creates a new list of ClusterJoinResponse.
func NewClusterJoinResponse_List(s *capnp.Segment, sz int32) (ClusterJoinResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[ClusterJoinResponse](l), err
}

// ClusterJoinResponse_Future is a wrapper for a ClusterJoinResponse promised by a client call.
type ClusterJoinResponse_Future struct{ *capnp.Future }

func (f ClusterJoinResponse_Future) Struct() (ClusterJoinResponse, error) {
	p, err := f.Future.Ptr()
	return ClusterJoinResponse(p.Struct()), err
}
func (p ClusterJoinResponse_Future) Pos() Vector_Future {
	return Vector_Future{Future: p.Future.Field(1, nil)}
}

type MapData capnp.Struct

// MapData_TypeID is the unique identifier for the type MapData.
const MapData_TypeID = 0xc818a5ce7d315b5f

func NewMapData(s *capnp.Segment) (MapData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MapData(st), err
}

func NewRootMapData(s *capnp.Segment) (MapData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MapData(st), err
}

func ReadRootMapData(msg *capnp.Message) (MapData, error) {
	root, err := msg.Root()
	return MapData(root.Struct()), err
}

func (s MapData) String() string {
	str, _ := text.Marshal(0xc818a5ce7d315b5f, capnp.Struct(s))
	return str
}

func (s MapData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MapData) DecodeFromPtr(p capnp.Ptr) MapData {
	return MapData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MapData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MapData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MapData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MapData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MapData) Size() (Vector, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Vector(p.Struct()), err
}

func (s MapData) HasSize() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MapData) SetSize(v Vector) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSize sets the size field to a newly
// allocated Vector struct, preferring placement in s's segment.
func (s MapData) NewSize() (Vector, error) {
	ss, err := NewVector(capnp.Struct(s).Segment())
	if err != nil {
		return Vector{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MapData_List is a list of MapData.
type MapData_List = capnp.StructList[MapData]

// NewMapData creates a new list of MapData.
func NewMapData_List(s *capnp.Segment, sz int32) (MapData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[MapData](l), err
}

// MapData_Future is a wrapper for a MapData promised by a client call.
type MapData_Future struct{ *capnp.Future }

func (f MapData_Future) Struct() (MapData, error) {
	p, err := f.Future.Ptr()
	return MapData(p.Struct()), err
}
func (p MapData_Future) Size() Vector_Future {
	return Vector_Future{Future: p.Future.Field(0, nil)}
}

type ClientConnectionRequest capnp.Struct

// ClientConnectionRequest_TypeID is the unique identifier for the type ClientConnectionRequest.
const ClientConnectionRequest_TypeID = 0x874806c29c1c0838

func NewClientConnectionRequest(s *capnp.Segment) (ClientConnectionRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ClientConnectionRequest(st), err
}

func NewRootClientConnectionRequest(s *capnp.Segment) (ClientConnectionRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ClientConnectionRequest(st), err
}

func ReadRootClientConnectionRequest(msg *capnp.Message) (ClientConnectionRequest, error) {
	root, err := msg.Root()
	return ClientConnectionRequest(root.Struct()), err
}

func (s ClientConnectionRequest) String() string {
	str, _ := text.Marshal(0x874806c29c1c0838, capnp.Struct(s))
	return str
}

func (s ClientConnectionRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClientConnectionRequest) DecodeFromPtr(p capnp.Ptr) ClientConnectionRequest {
	return ClientConnectionRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClientConnectionRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClientConnectionRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClientConnectionRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClientConnectionRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ClientConnectionRequest_List is a list of ClientConnectionRequest.
type ClientConnectionRequest_List = capnp.StructList[ClientConnectionRequest]

// NewClientConnectionRequest creates a new list of ClientConnectionRequest.
func NewClientConnectionRequest_List(s *capnp.Segment, sz int32) (ClientConnectionRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ClientConnectionRequest](l), err
}

// ClientConnectionRequest_Future is a wrapper for a ClientConnectionRequest promised by a client call.
type ClientConnectionRequest_Future struct{ *capnp.Future }

func (f ClientConnectionRequest_Future) Struct() (ClientConnectionRequest, error) {
	p, err := f.Future.Ptr()
	return ClientConnectionRequest(p.Struct()), err
}

type ClientConnectionResponse capnp.Struct

// ClientConnectionResponse_TypeID is the unique identifier for the type ClientConnectionResponse.
const ClientConnectionResponse_TypeID = 0x96ab4e0b79afcb59

func NewClientConnectionResponse(s *capnp.Segment) (ClientConnectionResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ClientConnectionResponse(st), err
}

func NewRootClientConnectionResponse(s *capnp.Segment) (ClientConnectionResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ClientConnectionResponse(st), err
}

func ReadRootClientConnectionResponse(msg *capnp.Message) (ClientConnectionResponse, error) {
	root, err := msg.Root()
	return ClientConnectionResponse(root.Struct()), err
}

func (s ClientConnectionResponse) String() string {
	str, _ := text.Marshal(0x96ab4e0b79afcb59, capnp.Struct(s))
	return str
}

func (s ClientConnectionResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClientConnectionResponse) DecodeFromPtr(p capnp.Ptr) ClientConnectionResponse {
	return ClientConnectionResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClientConnectionResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClientConnectionResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClientConnectionResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClientConnectionResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClientConnectionResponse) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ClientConnectionResponse) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClientConnectionResponse) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ClientConnectionResponse) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ClientConnectionResponse) Position() (Vector, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Vector(p.Struct()), err
}

func (s ClientConnectionResponse) HasPosition() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ClientConnectionResponse) SetPosition(v Vector) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewPosition sets the position field to a newly
// allocated Vector struct, preferring placement in s's segment.
func (s ClientConnectionResponse) NewPosition() (Vector, error) {
	ss, err := NewVector(capnp.Struct(s).Segment())
	if err != nil {
		return Vector{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ClientConnectionResponse) MapData() (MapData, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return MapData(p.Struct()), err
}

func (s ClientConnectionResponse) HasMapData() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ClientConnectionResponse) SetMapData(v MapData) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewMapData sets the mapData field to a newly
// allocated MapData struct, preferring placement in s's segment.
func (s ClientConnectionResponse) NewMapData() (MapData, error) {
	ss, err := NewMapData(capnp.Struct(s).Segment())
	if err != nil {
		return MapData{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ClientConnectionResponse_List is a list of ClientConnectionResponse.
type ClientConnectionResponse_List = capnp.StructList[ClientConnectionResponse]

// NewClientConnectionResponse creates a new list of ClientConnectionResponse.
func NewClientConnectionResponse_List(s *capnp.Segment, sz int32) (ClientConnectionResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[ClientConnectionResponse](l), err
}

// ClientConnectionResponse_Future is a wrapper for a ClientConnectionResponse promised by a client call.
type ClientConnectionResponse_Future struct{ *capnp.Future }

func (f ClientConnectionResponse_Future) Struct() (ClientConnectionResponse, error) {
	p, err := f.Future.Ptr()
	return ClientConnectionResponse(p.Struct()), err
}
func (p ClientConnectionResponse_Future) Position() Vector_Future {
	return Vector_Future{Future: p.Future.Field(1, nil)}
}
func (p ClientConnectionResponse_Future) MapData() MapData_Future {
	return MapData_Future{Future: p.Future.Field(2, nil)}
}

const schema_b81e0a7d72638bf1 = "x\xda\xbc\x95_h\\E\x14\xc6\xcf\x99\xb9wo\xd0" +
	"]\xb3\x9b\xc9\x83\x14\xb5(\x0a\xa96\x9am|\xa8A" +
	"\xd96I\xd1-\xae\xec\xb4F\xdb*\xa6\xd3\xdd1Y" +
	"I\xf6\xde\xdc;i\xb3b\x89\xa8\x10\xd4'\x1f\x14\xc4" +
	"\x0a>\xd8\x87\"R\xb0(A(X\x1f\xa4\"\xfd\x83" +
	"\x8f\xd6W\x15\xeaS\x04\x15\x83\xed\xc8\xcc\xee\xde]\xd7" +
	"\xab\xeeS\x1fw\xf6w\xe7|\xe7;\xdf\xcc\x8c\xcd\x92" +
	"]N>\xb3\xe6\x02\xe1\xbb\xdc\x94\xde9p\xdb\x89/" +
	"S\x8f\xadA\x8e\xa1\xdex\xb3\x12\x1e\xbf\xe9\x8eup" +
	"<\x80\xf1S\xe4\x10\xb2\xb3\xc4\x03\xaa\x0f~s\xbaq" +
	"\xf3\x13\x1f\xbd\xf3w\xca\xa5\x06{\x97\x1cA\xf61\xf1" +
	"\x00\xd8)r\x1aP\xefv\xb6Wg\x7f\x7f\xfa\x03\xe0" +
	"\x0c\xbbi4H\x91\xfe\xc2f\xccw\x8c\xd3c\x80\xfa" +
	"\xfd\x93/o\x04+W>L\x84?\xa5\x9b\xec\x9c\x85" +
	"\xcfZ\xf80\xb9x\xe0\xd8'\x17>K\x84ow6" +
	"\xd96#\x9c\xdd\xe3\x18\xf8\xea\xe5W?\xff\xf5\xbd\x13" +
	"\xebI\xf0\xf8\xeb\x0eA\xf6\xb6\xa5\xdf\xb2\xf4\xe5-a" +
	"\xfa\xe73W\xbe\xe8\xe9\xd0\xc2\x1b\xce\x16d\xe8\x1a\xf8" +
	"\x9aS\x00\xd4\xb3\xcf\xe4\x8f_<y\xeb\xf9\x04\x98\xe5" +
	"\xdd\xef\xd8#\x96}\xc85l\xb1\xb8>G'\xc7/" +
	"\xf5\xb0\xc6\xaf\xf1\x83\xee\x04\xb2\x9a\x85\xa5kT\x0c\xd1" +
	"\xf3\xcf\x0f}\xb5\xf6C\x8ff\xab\xf3\x9c\xfb-\xbb`" +
	"\xd9\xaf-{\xfd\xd2\x99'\xe9sW\x7f\xeba\xf7\xa0" +
	"\xe7\x18\x0fR\x9b,\x9f2\xf4h\xea'@}\xdf\x8e" +
	"\x89\x1f\xdf\xf8~\xe4\x8f\xa4\xfer\xde\x0edwz\xd6" +
	"D\xaf\x00\xa3\xba\"\x82z\xf0@\xc5w\x16\x17\xfd\xfa" +
	"\xfd\xf6\xd7\xc4\xd4BM\xd6\xd5\x94_\xaf\xcb\x8a\xaa\xf9" +
	"\xf5}riY\xd2H\x95\x11\xfb\xe4\xa3\xc0\xf7\xea\x91" +
	",#\xf24u\x00\x1c\x04\xc8\xed\xd9\x0b\xc0\xa7)\xf2" +
	"2\xc1\x1c\xe20\x9a\xc5\x92Y|\x9c\"?@0G" +
	"\xc80\x12\x80\xdc\xcc$\x00/S\xe4\xcf\x12\xd4\x15\xbb" +
	"{q\x1a\x000\x0d\x04\xd3\x80:\xf0\xa3\x9a\xa9d\xd6" +
	"\xb2\x1d+\x011\x0b\xb8\xba(\x82i\xa1\x04f;\xd3" +
	"k\xfe\x13\xab']\xea\xcb\x0b\xa2!\xb7\x86%\xff\xa8" +
	"\xd5;\x10\xeb\xddf\xa4\x8dP\xe4\x0f\x12l\xcb\xcd\x9b" +
	"\xb51\x8a\xfca\x82:0_\x86Me\x0e\x10t\xfe" +
	"OYb\xfd\xa9y\xa1J\x05\x19Eb\xae\x1f\x01\xf7" +
	"\x02\xf0\xed\x14\xf9\xced\x01\x83J\xae\xa8\xd8\xa7\x7f\xed" +
	"\xb7\x10\xeeWB\xdd\xb8\x86i\xaf\x80p\xb7\x8d\x0a\xf4" +
	"\xa1`\xe2\xbf;.\x08\xbb\xd3?z\xee.\xf9\xa8X" +
	"\x94\xb6\xe1\x99\xa0*h\xb3o'\xae\x9ay\x01\x80\xa7" +
	")\xf2\x91\xb8\xc2~\x05\x83B\xc9\x08o\x01,S\xc4" +
	"l\xe7B\x024\x8b\x89\xd6\x96L\xf0\xa8\x12=\xdb\x9b" +
	"\x91\x0dP\xe4\xc3\x04\x07\xa3\xda\x8b\xb2O\x9f\xa6\x16\x96" +
	"#%\xc3\xbd~\xad\xbeO\x16\xa2\xc0o\x9d\xa8.\xbb" +
	"\xcc9\xb9\x9b\"\x1f\xeb:Q\xa3wu<\\\x8d\xe6" +
	"EX-N\xb7\xcd\xf1\x02?\xea3\x96O\xc9\x8a\xf2" +
	"1\xec)8\x94Tp\xa8kh+\xed\xb1`#\x8e" +
	"H\xd2\xf6f\"\xdd\xa9\xcfR'\xad\xb5-\"\x0e\x01" +
	"\xf0\xc3\x14\xf9\x02\xc1\x0c^\xd7\xcd*53\xa4y\x8a" +
	"\\\x11\xcc\x90k\xbayS,\xbd\x02\xc0\x03\x8a\xfc%" +
	"\x82\x19\xfa\xa7\x1eF\x0a\x90k\x1c\x01\xe0+\x14\xf9k" +
	"\xf1@K>\xd0\xa3\xc6\xf9\xf8\xc9j\xf5\x1e\xb4\xd2\x08" +
	"\x836E\xd9\xcec\xd2\x02\xe6Z\xd9A\x1b\x1e%M" +
	"\xcc\xe3'\xa4m\xa09\xc32\x8a\xc0\x13s\xa6H\xfc" +
	"\xd4\xf5;\xde\xadK\xcb\xd2^\xb0\xdd\xb9\x99\xec\xe4f" +
	"UT\xab\xa1\x8c\xa2\xf6 \xff\x0a\x00\x00\xff\xffnV" +
	"\x05%"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_b81e0a7d72638bf1,
		Nodes: []uint64{
			0x874806c29c1c0838,
			0x96ab4e0b79afcb59,
			0xa057f75f642c0441,
			0xa4db7870f180a59d,
			0xb6cdb27758ce0260,
			0xb89c9bf5ba83d0ea,
			0xc0dbb3eb0c721ad0,
			0xc818a5ce7d315b5f,
			0xcf33420367b84949,
			0xe587c61266c80312,
			0xf6ea5e0354b3cffe,
			0xf928dc8ae63a322b,
		},
		Compressed: true,
	})
}
