// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
	strconv "strconv"
)

type GameMessage capnp.Struct
type GameMessage_Which uint16

const (
	GameMessage_Which_playerMove      GameMessage_Which = 0
	GameMessage_Which_playerAction    GameMessage_Which = 1
	GameMessage_Which_gameStateUpdate GameMessage_Which = 2
	GameMessage_Which_chatMessage     GameMessage_Which = 3
)

func (w GameMessage_Which) String() string {
	const s = "playerMoveplayerActiongameStateUpdatechatMessage"
	switch w {
	case GameMessage_Which_playerMove:
		return s[0:10]
	case GameMessage_Which_playerAction:
		return s[10:22]
	case GameMessage_Which_gameStateUpdate:
		return s[22:37]
	case GameMessage_Which_chatMessage:
		return s[37:48]

	}
	return "GameMessage_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// GameMessage_TypeID is the unique identifier for the type GameMessage.
const GameMessage_TypeID = 0xf6ea5e0354b3cffe

func NewGameMessage(s *capnp.Segment) (GameMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GameMessage(st), err
}

func NewRootGameMessage(s *capnp.Segment) (GameMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GameMessage(st), err
}

func ReadRootGameMessage(msg *capnp.Message) (GameMessage, error) {
	root, err := msg.Root()
	return GameMessage(root.Struct()), err
}

func (s GameMessage) String() string {
	str, _ := text.Marshal(0xf6ea5e0354b3cffe, capnp.Struct(s))
	return str
}

func (s GameMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GameMessage) DecodeFromPtr(p capnp.Ptr) GameMessage {
	return GameMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GameMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s GameMessage) Which() GameMessage_Which {
	return GameMessage_Which(capnp.Struct(s).Uint16(0))
}
func (s GameMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GameMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GameMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GameMessage) PlayerMove() (PlayerMove, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != playerMove")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return PlayerMove(p.Struct()), err
}

func (s GameMessage) HasPlayerMove() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s GameMessage) SetPlayerMove(v PlayerMove) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPlayerMove sets the playerMove field to a newly
// allocated PlayerMove struct, preferring placement in s's segment.
func (s GameMessage) NewPlayerMove() (PlayerMove, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewPlayerMove(capnp.Struct(s).Segment())
	if err != nil {
		return PlayerMove{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s GameMessage) PlayerAction() (PlayerAction, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != playerAction")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return PlayerAction(p.Struct()), err
}

func (s GameMessage) HasPlayerAction() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s GameMessage) SetPlayerAction(v PlayerAction) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPlayerAction sets the playerAction field to a newly
// allocated PlayerAction struct, preferring placement in s's segment.
func (s GameMessage) NewPlayerAction() (PlayerAction, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewPlayerAction(capnp.Struct(s).Segment())
	if err != nil {
		return PlayerAction{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s GameMessage) GameStateUpdate() (GameStateUpdate, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != gameStateUpdate")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return GameStateUpdate(p.Struct()), err
}

func (s GameMessage) HasGameStateUpdate() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s GameMessage) SetGameStateUpdate(v GameStateUpdate) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGameStateUpdate sets the gameStateUpdate field to a newly
// allocated GameStateUpdate struct, preferring placement in s's segment.
func (s GameMessage) NewGameStateUpdate() (GameStateUpdate, error) {
	capnp.Struct(s).SetUint16(0, 2)
	ss, err := NewGameStateUpdate(capnp.Struct(s).Segment())
	if err != nil {
		return GameStateUpdate{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s GameMessage) ChatMessage() (ChatMessage, error) {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != chatMessage")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return ChatMessage(p.Struct()), err
}

func (s GameMessage) HasChatMessage() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s GameMessage) SetChatMessage(v ChatMessage) error {
	capnp.Struct(s).SetUint16(0, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewChatMessage sets the chatMessage field to a newly
// allocated ChatMessage struct, preferring placement in s's segment.
func (s GameMessage) NewChatMessage() (ChatMessage, error) {
	capnp.Struct(s).SetUint16(0, 3)
	ss, err := NewChatMessage(capnp.Struct(s).Segment())
	if err != nil {
		return ChatMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// GameMessage_List is a list of GameMessage.
type GameMessage_List = capnp.StructList[GameMessage]

// NewGameMessage creates a new list of GameMessage.
func NewGameMessage_List(s *capnp.Segment, sz int32) (GameMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[GameMessage](l), err
}

// GameMessage_Future is a wrapper for a GameMessage promised by a client call.
type GameMessage_Future struct{ *capnp.Future }

func (f GameMessage_Future) Struct() (GameMessage, error) {
	p, err := f.Future.Ptr()
	return GameMessage(p.Struct()), err
}
func (p GameMessage_Future) PlayerMove() PlayerMove_Future {
	return PlayerMove_Future{Future: p.Future.Field(0, nil)}
}
func (p GameMessage_Future) PlayerAction() PlayerAction_Future {
	return PlayerAction_Future{Future: p.Future.Field(0, nil)}
}
func (p GameMessage_Future) GameStateUpdate() GameStateUpdate_Future {
	return GameStateUpdate_Future{Future: p.Future.Field(0, nil)}
}
func (p GameMessage_Future) ChatMessage() ChatMessage_Future {
	return ChatMessage_Future{Future: p.Future.Field(0, nil)}
}

type Vector capnp.Struct

// Vector_TypeID is the unique identifier for the type Vector.
const Vector_TypeID = 0xe587c61266c80312

func NewVector(s *capnp.Segment) (Vector, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Vector(st), err
}

func NewRootVector(s *capnp.Segment) (Vector, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Vector(st), err
}

func ReadRootVector(msg *capnp.Message) (Vector, error) {
	root, err := msg.Root()
	return Vector(root.Struct()), err
}

func (s Vector) String() string {
	str, _ := text.Marshal(0xe587c61266c80312, capnp.Struct(s))
	return str
}

func (s Vector) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Vector) DecodeFromPtr(p capnp.Ptr) Vector {
	return Vector(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Vector) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Vector) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Vector) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Vector) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Vector) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s Vector) SetX(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s Vector) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Vector) SetY(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

// Vector_List is a list of Vector.
type Vector_List = capnp.StructList[Vector]

// NewVector creates a new list of Vector.
func NewVector_List(s *capnp.Segment, sz int32) (Vector_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Vector](l), err
}

// Vector_Future is a wrapper for a Vector promised by a client call.
type Vector_Future struct{ *capnp.Future }

func (f Vector_Future) Struct() (Vector, error) {
	p, err := f.Future.Ptr()
	return Vector(p.Struct()), err
}

type Dimensions capnp.Struct

// Dimensions_TypeID is the unique identifier for the type Dimensions.
const Dimensions_TypeID = 0xf1c798730c043ddb

func NewDimensions(s *capnp.Segment) (Dimensions, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Dimensions(st), err
}

func NewRootDimensions(s *capnp.Segment) (Dimensions, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Dimensions(st), err
}

func ReadRootDimensions(msg *capnp.Message) (Dimensions, error) {
	root, err := msg.Root()
	return Dimensions(root.Struct()), err
}

func (s Dimensions) String() string {
	str, _ := text.Marshal(0xf1c798730c043ddb, capnp.Struct(s))
	return str
}

func (s Dimensions) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dimensions) DecodeFromPtr(p capnp.Ptr) Dimensions {
	return Dimensions(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dimensions) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dimensions) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dimensions) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dimensions) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dimensions) Width() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Dimensions) SetWidth(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Dimensions) Height() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Dimensions) SetHeight(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// Dimensions_List is a list of Dimensions.
type Dimensions_List = capnp.StructList[Dimensions]

// NewDimensions creates a new list of Dimensions.
func NewDimensions_List(s *capnp.Segment, sz int32) (Dimensions_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Dimensions](l), err
}

// Dimensions_Future is a wrapper for a Dimensions promised by a client call.
type Dimensions_Future struct{ *capnp.Future }

func (f Dimensions_Future) Struct() (Dimensions, error) {
	p, err := f.Future.Ptr()
	return Dimensions(p.Struct()), err
}

type PlayerMove capnp.Struct

// PlayerMove_TypeID is the unique identifier for the type PlayerMove.
const PlayerMove_TypeID = 0xa057f75f642c0441

func NewPlayerMove(s *capnp.Segment) (PlayerMove, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PlayerMove(st), err
}

func NewRootPlayerMove(s *capnp.Segment) (PlayerMove, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PlayerMove(st), err
}

func ReadRootPlayerMove(msg *capnp.Message) (PlayerMove, error) {
	root, err := msg.Root()
	return PlayerMove(root.Struct()), err
}

func (s PlayerMove) String() string {
	str, _ := text.Marshal(0xa057f75f642c0441, capnp.Struct(s))
	return str
}

func (s PlayerMove) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PlayerMove) DecodeFromPtr(p capnp.Ptr) PlayerMove {
	return PlayerMove(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PlayerMove) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PlayerMove) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PlayerMove) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PlayerMove) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PlayerMove) PlayerID() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PlayerMove) SetPlayerID(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PlayerMove) Position() (Vector, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Vector(p.Struct()), err
}

func (s PlayerMove) HasPosition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PlayerMove) SetPosition(v Vector) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPosition sets the position field to a newly
// allocated Vector struct, preferring placement in s's segment.
func (s PlayerMove) NewPosition() (Vector, error) {
	ss, err := NewVector(capnp.Struct(s).Segment())
	if err != nil {
		return Vector{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// PlayerMove_List is a list of PlayerMove.
type PlayerMove_List = capnp.StructList[PlayerMove]

// NewPlayerMove creates a new list of PlayerMove.
func NewPlayerMove_List(s *capnp.Segment, sz int32) (PlayerMove_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[PlayerMove](l), err
}

// PlayerMove_Future is a wrapper for a PlayerMove promised by a client call.
type PlayerMove_Future struct{ *capnp.Future }

func (f PlayerMove_Future) Struct() (PlayerMove, error) {
	p, err := f.Future.Ptr()
	return PlayerMove(p.Struct()), err
}
func (p PlayerMove_Future) Position() Vector_Future {
	return Vector_Future{Future: p.Future.Field(0, nil)}
}

type PlayerAction capnp.Struct

// PlayerAction_TypeID is the unique identifier for the type PlayerAction.
const PlayerAction_TypeID = 0xb89c9bf5ba83d0ea

func NewPlayerAction(s *capnp.Segment) (PlayerAction, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PlayerAction(st), err
}

func NewRootPlayerAction(s *capnp.Segment) (PlayerAction, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PlayerAction(st), err
}

func ReadRootPlayerAction(msg *capnp.Message) (PlayerAction, error) {
	root, err := msg.Root()
	return PlayerAction(root.Struct()), err
}

func (s PlayerAction) String() string {
	str, _ := text.Marshal(0xb89c9bf5ba83d0ea, capnp.Struct(s))
	return str
}

func (s PlayerAction) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PlayerAction) DecodeFromPtr(p capnp.Ptr) PlayerAction {
	return PlayerAction(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PlayerAction) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PlayerAction) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PlayerAction) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PlayerAction) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PlayerAction) PlayerID() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PlayerAction) SetPlayerID(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PlayerAction) Action() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s PlayerAction) HasAction() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PlayerAction) ActionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s PlayerAction) SetAction(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// PlayerAction_List is a list of PlayerAction.
type PlayerAction_List = capnp.StructList[PlayerAction]

// NewPlayerAction creates a new list of PlayerAction.
func NewPlayerAction_List(s *capnp.Segment, sz int32) (PlayerAction_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[PlayerAction](l), err
}

// PlayerAction_Future is a wrapper for a PlayerAction promised by a client call.
type PlayerAction_Future struct{ *capnp.Future }

func (f PlayerAction_Future) Struct() (PlayerAction, error) {
	p, err := f.Future.Ptr()
	return PlayerAction(p.Struct()), err
}

type GameStateUpdate capnp.Struct

// GameStateUpdate_TypeID is the unique identifier for the type GameStateUpdate.
const GameStateUpdate_TypeID = 0xc0dbb3eb0c721ad0

func NewGameStateUpdate(s *capnp.Segment) (GameStateUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GameStateUpdate(st), err
}

func NewRootGameStateUpdate(s *capnp.Segment) (GameStateUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GameStateUpdate(st), err
}

func ReadRootGameStateUpdate(msg *capnp.Message) (GameStateUpdate, error) {
	root, err := msg.Root()
	return GameStateUpdate(root.Struct()), err
}

func (s GameStateUpdate) String() string {
	str, _ := text.Marshal(0xc0dbb3eb0c721ad0, capnp.Struct(s))
	return str
}

func (s GameStateUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GameStateUpdate) DecodeFromPtr(p capnp.Ptr) GameStateUpdate {
	return GameStateUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GameStateUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GameStateUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GameStateUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GameStateUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GameStateUpdate) PlayerStates() (PlayerState_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return PlayerState_List(p.List()), err
}

func (s GameStateUpdate) HasPlayerStates() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GameStateUpdate) SetPlayerStates(v PlayerState_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPlayerStates sets the playerStates field to a newly
// allocated PlayerState_List, preferring placement in s's segment.
func (s GameStateUpdate) NewPlayerStates(n int32) (PlayerState_List, error) {
	l, err := NewPlayerState_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return PlayerState_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// GameStateUpdate_List is a list of GameStateUpdate.
type GameStateUpdate_List = capnp.StructList[GameStateUpdate]

// NewGameStateUpdate creates a new list of GameStateUpdate.
func NewGameStateUpdate_List(s *capnp.Segment, sz int32) (GameStateUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[GameStateUpdate](l), err
}

// GameStateUpdate_Future is a wrapper for a GameStateUpdate promised by a client call.
type GameStateUpdate_Future struct{ *capnp.Future }

func (f GameStateUpdate_Future) Struct() (GameStateUpdate, error) {
	p, err := f.Future.Ptr()
	return GameStateUpdate(p.Struct()), err
}

type PlayerState capnp.Struct

// PlayerState_TypeID is the unique identifier for the type PlayerState.
const PlayerState_TypeID = 0xb6cdb27758ce0260

func NewPlayerState(s *capnp.Segment) (PlayerState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PlayerState(st), err
}

func NewRootPlayerState(s *capnp.Segment) (PlayerState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PlayerState(st), err
}

func ReadRootPlayerState(msg *capnp.Message) (PlayerState, error) {
	root, err := msg.Root()
	return PlayerState(root.Struct()), err
}

func (s PlayerState) String() string {
	str, _ := text.Marshal(0xb6cdb27758ce0260, capnp.Struct(s))
	return str
}

func (s PlayerState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PlayerState) DecodeFromPtr(p capnp.Ptr) PlayerState {
	return PlayerState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PlayerState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PlayerState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PlayerState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PlayerState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PlayerState) PlayerID() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PlayerState) SetPlayerID(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PlayerState) Position() (Vector, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Vector(p.Struct()), err
}

func (s PlayerState) HasPosition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PlayerState) SetPosition(v Vector) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPosition sets the position field to a newly
// allocated Vector struct, preferring placement in s's segment.
func (s PlayerState) NewPosition() (Vector, error) {
	ss, err := NewVector(capnp.Struct(s).Segment())
	if err != nil {
		return Vector{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// PlayerState_List is a list of PlayerState.
type PlayerState_List = capnp.StructList[PlayerState]

// NewPlayerState creates a new list of PlayerState.
func NewPlayerState_List(s *capnp.Segment, sz int32) (PlayerState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[PlayerState](l), err
}

// PlayerState_Future is a wrapper for a PlayerState promised by a client call.
type PlayerState_Future struct{ *capnp.Future }

func (f PlayerState_Future) Struct() (PlayerState, error) {
	p, err := f.Future.Ptr()
	return PlayerState(p.Struct()), err
}
func (p PlayerState_Future) Position() Vector_Future {
	return Vector_Future{Future: p.Future.Field(0, nil)}
}

type ChatMessage capnp.Struct

// ChatMessage_TypeID is the unique identifier for the type ChatMessage.
const ChatMessage_TypeID = 0xa4db7870f180a59d

func NewChatMessage(s *capnp.Segment) (ChatMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ChatMessage(st), err
}

func NewRootChatMessage(s *capnp.Segment) (ChatMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ChatMessage(st), err
}

func ReadRootChatMessage(msg *capnp.Message) (ChatMessage, error) {
	root, err := msg.Root()
	return ChatMessage(root.Struct()), err
}

func (s ChatMessage) String() string {
	str, _ := text.Marshal(0xa4db7870f180a59d, capnp.Struct(s))
	return str
}

func (s ChatMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ChatMessage) DecodeFromPtr(p capnp.Ptr) ChatMessage {
	return ChatMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ChatMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ChatMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ChatMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ChatMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ChatMessage) PlayerID() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ChatMessage) SetPlayerID(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ChatMessage) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ChatMessage) HasText() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ChatMessage) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ChatMessage) SetText(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ChatMessage_List is a list of ChatMessage.
type ChatMessage_List = capnp.StructList[ChatMessage]

// NewChatMessage creates a new list of ChatMessage.
func NewChatMessage_List(s *capnp.Segment, sz int32) (ChatMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ChatMessage](l), err
}

// ChatMessage_Future is a wrapper for a ChatMessage promised by a client call.
type ChatMessage_Future struct{ *capnp.Future }

func (f ChatMessage_Future) Struct() (ChatMessage, error) {
	p, err := f.Future.Ptr()
	return ChatMessage(p.Struct()), err
}

type ClusterJoinRequest capnp.Struct

// ClusterJoinRequest_TypeID is the unique identifier for the type ClusterJoinRequest.
const ClusterJoinRequest_TypeID = 0xf928dc8ae63a322b

func NewClusterJoinRequest(s *capnp.Segment) (ClusterJoinRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClusterJoinRequest(st), err
}

func NewRootClusterJoinRequest(s *capnp.Segment) (ClusterJoinRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClusterJoinRequest(st), err
}

func ReadRootClusterJoinRequest(msg *capnp.Message) (ClusterJoinRequest, error) {
	root, err := msg.Root()
	return ClusterJoinRequest(root.Struct()), err
}

func (s ClusterJoinRequest) String() string {
	str, _ := text.Marshal(0xf928dc8ae63a322b, capnp.Struct(s))
	return str
}

func (s ClusterJoinRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClusterJoinRequest) DecodeFromPtr(p capnp.Ptr) ClusterJoinRequest {
	return ClusterJoinRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClusterJoinRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClusterJoinRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClusterJoinRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClusterJoinRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClusterJoinRequest) Address() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ClusterJoinRequest) HasAddress() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClusterJoinRequest) AddressBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ClusterJoinRequest) SetAddress(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ClusterJoinRequest_List is a list of ClusterJoinRequest.
type ClusterJoinRequest_List = capnp.StructList[ClusterJoinRequest]

// NewClusterJoinRequest creates a new list of ClusterJoinRequest.
func NewClusterJoinRequest_List(s *capnp.Segment, sz int32) (ClusterJoinRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ClusterJoinRequest](l), err
}

// ClusterJoinRequest_Future is a wrapper for a ClusterJoinRequest promised by a client call.
type ClusterJoinRequest_Future struct{ *capnp.Future }

func (f ClusterJoinRequest_Future) Struct() (ClusterJoinRequest, error) {
	p, err := f.Future.Ptr()
	return ClusterJoinRequest(p.Struct()), err
}

type ClusterJoinResponse capnp.Struct

// ClusterJoinResponse_TypeID is the unique identifier for the type ClusterJoinResponse.
const ClusterJoinResponse_TypeID = 0xcf33420367b84949

func NewClusterJoinResponse(s *capnp.Segment) (ClusterJoinResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ClusterJoinResponse(st), err
}

func NewRootClusterJoinResponse(s *capnp.Segment) (ClusterJoinResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ClusterJoinResponse(st), err
}

func ReadRootClusterJoinResponse(msg *capnp.Message) (ClusterJoinResponse, error) {
	root, err := msg.Root()
	return ClusterJoinResponse(root.Struct()), err
}

func (s ClusterJoinResponse) String() string {
	str, _ := text.Marshal(0xcf33420367b84949, capnp.Struct(s))
	return str
}

func (s ClusterJoinResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClusterJoinResponse) DecodeFromPtr(p capnp.Ptr) ClusterJoinResponse {
	return ClusterJoinResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClusterJoinResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClusterJoinResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClusterJoinResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClusterJoinResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClusterJoinResponse) ShardID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ClusterJoinResponse) HasShardID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClusterJoinResponse) ShardIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ClusterJoinResponse) SetShardID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ClusterJoinResponse) Pos() (Vector, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Vector(p.Struct()), err
}

func (s ClusterJoinResponse) HasPos() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ClusterJoinResponse) SetPos(v Vector) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewPos sets the pos field to a newly
// allocated Vector struct, preferring placement in s's segment.
func (s ClusterJoinResponse) NewPos() (Vector, error) {
	ss, err := NewVector(capnp.Struct(s).Segment())
	if err != nil {
		return Vector{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ClusterJoinResponse_List is a list of ClusterJoinResponse.
type ClusterJoinResponse_List = capnp.StructList[ClusterJoinResponse]

// NewClusterJoinResponse creates a new list of ClusterJoinResponse.
func NewClusterJoinResponse_List(s *capnp.Segment, sz int32) (ClusterJoinResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[ClusterJoinResponse](l), err
}

// ClusterJoinResponse_Future is a wrapper for a ClusterJoinResponse promised by a client call.
type ClusterJoinResponse_Future struct{ *capnp.Future }

func (f ClusterJoinResponse_Future) Struct() (ClusterJoinResponse, error) {
	p, err := f.Future.Ptr()
	return ClusterJoinResponse(p.Struct()), err
}
func (p ClusterJoinResponse_Future) Pos() Vector_Future {
	return Vector_Future{Future: p.Future.Field(1, nil)}
}

type MapData capnp.Struct

// MapData_TypeID is the unique identifier for the type MapData.
const MapData_TypeID = 0xc818a5ce7d315b5f

func NewMapData(s *capnp.Segment) (MapData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MapData(st), err
}

func NewRootMapData(s *capnp.Segment) (MapData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MapData(st), err
}

func ReadRootMapData(msg *capnp.Message) (MapData, error) {
	root, err := msg.Root()
	return MapData(root.Struct()), err
}

func (s MapData) String() string {
	str, _ := text.Marshal(0xc818a5ce7d315b5f, capnp.Struct(s))
	return str
}

func (s MapData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MapData) DecodeFromPtr(p capnp.Ptr) MapData {
	return MapData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MapData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MapData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MapData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MapData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MapData) Size() (Dimensions, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Dimensions(p.Struct()), err
}

func (s MapData) HasSize() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MapData) SetSize(v Dimensions) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSize sets the size field to a newly
// allocated Dimensions struct, preferring placement in s's segment.
func (s MapData) NewSize() (Dimensions, error) {
	ss, err := NewDimensions(capnp.Struct(s).Segment())
	if err != nil {
		return Dimensions{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MapData_List is a list of MapData.
type MapData_List = capnp.StructList[MapData]

// NewMapData creates a new list of MapData.
func NewMapData_List(s *capnp.Segment, sz int32) (MapData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[MapData](l), err
}

// MapData_Future is a wrapper for a MapData promised by a client call.
type MapData_Future struct{ *capnp.Future }

func (f MapData_Future) Struct() (MapData, error) {
	p, err := f.Future.Ptr()
	return MapData(p.Struct()), err
}
func (p MapData_Future) Size() Dimensions_Future {
	return Dimensions_Future{Future: p.Future.Field(0, nil)}
}

type ClientConnectionRequest capnp.Struct

// ClientConnectionRequest_TypeID is the unique identifier for the type ClientConnectionRequest.
const ClientConnectionRequest_TypeID = 0x874806c29c1c0838

func NewClientConnectionRequest(s *capnp.Segment) (ClientConnectionRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ClientConnectionRequest(st), err
}

func NewRootClientConnectionRequest(s *capnp.Segment) (ClientConnectionRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ClientConnectionRequest(st), err
}

func ReadRootClientConnectionRequest(msg *capnp.Message) (ClientConnectionRequest, error) {
	root, err := msg.Root()
	return ClientConnectionRequest(root.Struct()), err
}

func (s ClientConnectionRequest) String() string {
	str, _ := text.Marshal(0x874806c29c1c0838, capnp.Struct(s))
	return str
}

func (s ClientConnectionRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClientConnectionRequest) DecodeFromPtr(p capnp.Ptr) ClientConnectionRequest {
	return ClientConnectionRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClientConnectionRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClientConnectionRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClientConnectionRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClientConnectionRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ClientConnectionRequest_List is a list of ClientConnectionRequest.
type ClientConnectionRequest_List = capnp.StructList[ClientConnectionRequest]

// NewClientConnectionRequest creates a new list of ClientConnectionRequest.
func NewClientConnectionRequest_List(s *capnp.Segment, sz int32) (ClientConnectionRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ClientConnectionRequest](l), err
}

// ClientConnectionRequest_Future is a wrapper for a ClientConnectionRequest promised by a client call.
type ClientConnectionRequest_Future struct{ *capnp.Future }

func (f ClientConnectionRequest_Future) Struct() (ClientConnectionRequest, error) {
	p, err := f.Future.Ptr()
	return ClientConnectionRequest(p.Struct()), err
}

type ClientConnectionResponse capnp.Struct

// ClientConnectionResponse_TypeID is the unique identifier for the type ClientConnectionResponse.
const ClientConnectionResponse_TypeID = 0x96ab4e0b79afcb59

func NewClientConnectionResponse(s *capnp.Segment) (ClientConnectionResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ClientConnectionResponse(st), err
}

func NewRootClientConnectionResponse(s *capnp.Segment) (ClientConnectionResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ClientConnectionResponse(st), err
}

func ReadRootClientConnectionResponse(msg *capnp.Message) (ClientConnectionResponse, error) {
	root, err := msg.Root()
	return ClientConnectionResponse(root.Struct()), err
}

func (s ClientConnectionResponse) String() string {
	str, _ := text.Marshal(0x96ab4e0b79afcb59, capnp.Struct(s))
	return str
}

func (s ClientConnectionResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClientConnectionResponse) DecodeFromPtr(p capnp.Ptr) ClientConnectionResponse {
	return ClientConnectionResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClientConnectionResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClientConnectionResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClientConnectionResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClientConnectionResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClientConnectionResponse) ClientID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ClientConnectionResponse) HasClientID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClientConnectionResponse) ClientIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ClientConnectionResponse) SetClientID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ClientConnectionResponse) Position() (Vector, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Vector(p.Struct()), err
}

func (s ClientConnectionResponse) HasPosition() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ClientConnectionResponse) SetPosition(v Vector) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewPosition sets the position field to a newly
// allocated Vector struct, preferring placement in s's segment.
func (s ClientConnectionResponse) NewPosition() (Vector, error) {
	ss, err := NewVector(capnp.Struct(s).Segment())
	if err != nil {
		return Vector{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ClientConnectionResponse) MapData() (MapData, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return MapData(p.Struct()), err
}

func (s ClientConnectionResponse) HasMapData() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ClientConnectionResponse) SetMapData(v MapData) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewMapData sets the mapData field to a newly
// allocated MapData struct, preferring placement in s's segment.
func (s ClientConnectionResponse) NewMapData() (MapData, error) {
	ss, err := NewMapData(capnp.Struct(s).Segment())
	if err != nil {
		return MapData{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ClientConnectionResponse_List is a list of ClientConnectionResponse.
type ClientConnectionResponse_List = capnp.StructList[ClientConnectionResponse]

// NewClientConnectionResponse creates a new list of ClientConnectionResponse.
func NewClientConnectionResponse_List(s *capnp.Segment, sz int32) (ClientConnectionResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[ClientConnectionResponse](l), err
}

// ClientConnectionResponse_Future is a wrapper for a ClientConnectionResponse promised by a client call.
type ClientConnectionResponse_Future struct{ *capnp.Future }

func (f ClientConnectionResponse_Future) Struct() (ClientConnectionResponse, error) {
	p, err := f.Future.Ptr()
	return ClientConnectionResponse(p.Struct()), err
}
func (p ClientConnectionResponse_Future) Position() Vector_Future {
	return Vector_Future{Future: p.Future.Field(1, nil)}
}
func (p ClientConnectionResponse_Future) MapData() MapData_Future {
	return MapData_Future{Future: p.Future.Field(2, nil)}
}

const schema_b81e0a7d72638bf1 = "x\xda\xbc\x95_h\x1c\xd5\x17\xc7\xcf\xb9wf'\xe4" +
	"\xb7\xfb\xcbnn\x1e\xa4\xa8\x01\xf1!\xd5F\xf3\xc7\x87" +
	"\xb2(k\x93-\xba\xc5\x95\xbd\xad\xd1\xb6Z\xdb\xe9\xee" +
	"uw$;3\x99\x994\x89\x18\xe2_\x0a\x0a\x82\x0f" +
	"\x8a`\x05\x05\xfb$R\xb4T\x82P\xb0\x82Z\x10\xdb" +
	"\"\xf4A#\x88\x0f*\xad\xf4!\x85*\x0d\xda\x91{" +
	"wwv]\xc7\xbaO\xbemn>s\xbf\xdfs\xce" +
	"\xf7\xde;\xf6\x0a\xb9W\x1bO}\xaf\x03\xe1y=\x11" +
	"n\xed\xbb\xf1\xc8\xa7\x89\xfb\x0fC\x86a\xb8\xfer\xd9" +
	"[\xee\xbfy\x154\x03`\xf2<\xd9\x8b\xec\x021\x80" +
	"\x86{\xbe<\xb6\xf4\xbf\x07\xdf{\xfd\xaf\x94N%\xf6" +
	"\x199\x88\xec\x1bb\x00\xb0\xf3\xe4\x18`\xb8M\xdbR" +
	"\xd9\xff\xdb#o\x03g\xd8I\xa3D\xe6\xe9e\xf6\xac" +
	"\xfc\x8e-\xd3\x05\xc0\xf0\xad\xa3\xcf\xac\xbb\x8bk\xef\xc6" +
	"\xc2?\xd0\x0dvI\xc1\x17\x14|\x80\x9c\xd9\xbd\xf0\xe1" +
	"W\x1f\xc5\xc2\x05m\x83\xcdH\xe3\x8ck\x12\xbex\xee" +
	"\xf9\x8f\xaf\xbcyd5\x0e\x9e<\xa1\x11d\xa7\x14}" +
	"R\xd1\xe76y\xc9_\x8e\xaf}\xd2U\xa1\x82o\xd2" +
	"7!\x1b\xd5%\xbcY\xcf\x01\x86\xfb\x1f\x1d_>s" +
	"\xf4\x86\xd310\xdb\xa7\x7f\xcb,\xc5\x0a\xc5\x16\x0a\xab" +
	"U:5y\xb6\x8b\x95\xfd\x9a|Q\xcf\"{M\xc1" +
	"\xaf\xea\xd2\xc5 =\xfd\xc4\xe0\xe7\x87\x7f\xec\xf2\xac|" +
	"^\xd2\xbffW\x15{E\xb1k\xf7hI\xff\x8d/" +
	"\xd6\xe3X\x9e\xb8\xcc\xf6%\xe4\xaf=\x09\xc9^;{" +
	"\xfc!\xfa\xf8\xc5_\xbb\xd8\xedhh\x00\xecDb\x83" +
	"\x9dR\xf4\xc9\xc4\xcf\x80\xe1\xed\x13\xd9\x9f^\xfan\xe4" +
	"j\\/\xde1&\x90}`H\xf8}#\x07\xa3a" +
	"\xd9tm\xf7\xce\xb2\xa3\xd5\xeb\x8e}\x87\xfa+;=" +
	"k\x09;\x98vl[\x94\x03\xcb\xb1w\x8a\xb9yA" +
	"\xfd\xa0\x84\xd8#\xef\xbb\x8ea\xfb\xa2\x84\xc8\x93T\x03" +
	"\xd0\x10 \xb3}\x07\x00\xcfS\xe4%\x82\x19\xc4!\x94" +
	"\x8bE\xb9\xf8\x00E\xbe\x9b`\x86\x90!$\x00\x99\x99" +
	")\x00^\xa2\xc8\x1f#\x18\x96\xd5\xee\x85<\x00`\x12" +
	"\x08&\x01C\xd7\xf1-\xa9$\xd7\xd2\xed\xb6\x03b\x1a" +
	"p\xa5n\xbay301\xdd\x9et\xe3?\x91{\xd2" +
	"\xe1\xbe4k.\x89a\xaf\xe8\x1cR~\xfb\"\xbf\x9b" +
	"\xa5\xb5\x11\x8a\xfc.\x82-\xbb\xe3rm\x8c\"\xbf\x9b" +
	"`\xe8\xca/\xbd\x863\x0d\x08j\xff\xe6,V\x7f\xba" +
	"f\x06\xc5\x9c\xf0}\xb3\xda\x8b\x81\xdb\x00\xf8\x16\x8a|" +
	"k\xbc\x81\x81@,\x06Q\x9f\xfe\xb1\xde\x9c\xb7+0" +
	"\x83\xff\xae`\xdam\xc0\xdb\xa6\xa2\x02=8\xc8^\xbf" +
	"\xe2\x9c\xa9v\xfa[\xcd\x9d\x92\xf7\x99u\xa1\x0a\x9eq" +
	"+&m\xd4\xadE\xaa\xa9'\x01x\x92\"\x1f\x89\x14" +
	"v\x050`\x06\xc2\xc7\xff\x03\x96(b\xba}y\x01" +
	"\xca\xc5\xd8\xd6\x16e\xf0h`vm/G\xd6G\x91" +
	"\x0f\x11\x1c\xf0\xad\xa7\x04\xa6\xdb\xa7\xff:}\x9a\x9e\x9d" +
	"\xf7\x03\xe1\xedp,{\xa7\xc8\xf9\xae\xd3<Q\x1d\xed" +
	"\x92\xe7\xe4V\x8a|\xac\xe3D\x8d\xde\xd2\xee\xe1\x8a_" +
	"3\xbdJ!\xdfj\x8e\xe1:~\x8f\xb1|X\x94\x03" +
	"\x07\xbd.\xc1\xc18\xc1\xc1\x8e\xa1-b?\x10\xec\x07" +
	"\xc4\xa5\xd6\xaf\xd8\xed\xf3V]\xd8\xc3\xbe\xe5\xd8~\x97" +
	"\xc4D\x9cD\xb6-1\xbc`U\x82Z4\xfd\x9a\xb0" +
	"\xaa\xb5 \x8ac\x9c\x96\x9c~\xe7\x09KS-\x19\x86" +
	"J\xcd\xdc\x0b\xc0\x0fP\xe4\xb3\x04Sx-l\xc8Y" +
	"2\x105\x8a< \x98\"\x7f\x84\x8d[i\xee9\x00" +
	"\xeeR\xe4O\x13L\xd1\xdf\xc3!\xa4\x00\x99\xa5\x83\x00" +
	"|\x91\"\x7f!\x0aO\xd1\x01zHN9zJ\x9b" +
	"}v\x9b\xc9\x87\x01\x95\xd8t\xfb\x91k\x02\xd5fN" +
	"Q\x055\x10\xf2HEO[kX\xf2\xbe\x10\xbe\x0f" +
	"\x86Y\x95\"\xd1\x13\xdck\x94\x86\xe7\xe6\x85\xba\xcc;" +
	"3:\xd5\xce\xe8\x8aY\xa9x\xc2\xf7[\xa1\xf93\x00" +
	"\x00\xff\xff%\x0f.\xa9"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_b81e0a7d72638bf1,
		Nodes: []uint64{
			0x874806c29c1c0838,
			0x96ab4e0b79afcb59,
			0xa057f75f642c0441,
			0xa4db7870f180a59d,
			0xb6cdb27758ce0260,
			0xb89c9bf5ba83d0ea,
			0xc0dbb3eb0c721ad0,
			0xc818a5ce7d315b5f,
			0xcf33420367b84949,
			0xe587c61266c80312,
			0xf1c798730c043ddb,
			0xf6ea5e0354b3cffe,
			0xf928dc8ae63a322b,
		},
		Compressed: true,
	})
}
